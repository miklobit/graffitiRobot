CCS PCM C Compiler, Version 4.104, 5967               10-Jul-16 01:02

               Filename: C:\Users\Nahuel\Documents\GitHub\microcontroladores\graffitiRobot\graffitiRobotSlave\1SlaveUpLeft\graffitiRobotSlave1.lst

               ROM used: 561 words (7%)
                         Largest free fragment is 2048
               RAM used: 29 (8%) at main() level
                         31 (8%) worst case
               Stack:    3 worst case (1 in main + 2 for interrupts)

*
0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   109
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BCF    03.7
0016:  BCF    03.5
0017:  MOVLW  8C
0018:  MOVWF  04
0019:  BTFSS  00.0
001A:  GOTO   01D
001B:  BTFSC  0C.0
001C:  GOTO   034
001D:  MOVLW  8C
001E:  MOVWF  04
001F:  BTFSS  00.3
0020:  GOTO   023
0021:  BTFSC  0C.3
0022:  GOTO   037
0023:  MOVF   22,W
0024:  MOVWF  04
0025:  MOVF   23,W
0026:  MOVWF  77
0027:  MOVF   24,W
0028:  MOVWF  78
0029:  MOVF   25,W
002A:  MOVWF  79
002B:  MOVF   26,W
002C:  MOVWF  7A
002D:  MOVF   20,W
002E:  MOVWF  0A
002F:  SWAPF  21,W
0030:  MOVWF  03
0031:  SWAPF  7F,F
0032:  SWAPF  7F,W
0033:  RETFIE
0034:  BCF    0A.3
0035:  BCF    0A.4
0036:  GOTO   046
0037:  BCF    0A.3
0038:  BCF    0A.4
0039:  GOTO   080
.................... #include "C:\Users\Nahuel\Documents\GitHub\microcontroladores\graffitiRobot\graffitiRobotSlave\1SlaveUpLeft\graffitiRobotSlave1.h" 
.................... #include <16F886.h> 
.................... //////// Standard Header file for the PIC16F886 device //////////////// 
.................... #device PIC16F886 
.................... #list 
....................  
.................... #device adc=8 
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES HS                    	//High speed Osc (> 4mhz for PCM/PCH) (>10mhz for PCD) 
.................... #FUSES NOPUT                 	//No Power Up Timer 
.................... #FUSES MCLR                  	//Master Clear pin enabled 
.................... #FUSES NOPROTECT             	//Code not protected from reading 
.................... #FUSES NOCPD                 	//No EE protection 
.................... #FUSES NOBROWNOUT            	//No brownout reset 
.................... #FUSES IESO                  	//Internal External Switch Over mode enabled 
.................... #FUSES FCMEN                 	//Fail-safe clock monitor enabled 
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NODEBUG               	//No Debug mode for ICD 
.................... #FUSES NOWRT                 	//Program memory not write protected 
.................... #FUSES BORV40                	//Brownout reset at 4.0V 
.................... #FUSES RESERVED              	//Used to set the reserved FUSE bits 
....................  
.................... #use delay(clock=20000000) 
.................... #use i2c(Slave,Fast,sda=PIN_C4,scl=PIN_C3,address=0x10) 
*
0095:  MOVF   39,W
0096:  MOVWF  13
0097:  BSF    14.4
0098:  BCF    0C.3
0099:  BSF    03.5
009A:  BTFSC  14.0
009B:  GOTO   09A
009C:  CLRF   78
009D:  BCF    03.5
009E:  BTFSC  14.4
009F:  INCF   78,F
.................... #use fast_io(A) 
....................  
.................... #BYTE PORTA = 0x05 
.................... #BYTE TRISA = 0x85 
....................  
.................... #BYTE PORTB = 0x06 
.................... #BYTE TRISB = 0x86 
....................  
.................... #BYTE PORTC = 0x07 
.................... #BYTE TRISC = 0x87 
....................  
....................  
.................... /*****************************************************************************/ 
.................... /**********************        Variables Globales        *********************/ 
....................  
.................... /** Variables de estado **/ 
.................... unsigned int8 estado;											//variable de estado del master 
.................... unsigned int8 estadoAnterior;									//variable que lleva el registro del estado anterior del master 
....................  
.................... /** Variables para comunicación I2C**/ 
.................... byte fstate;													//Guardara el estado del bus I2C 
.................... char orden; 
.................... int8 numero1; 
.................... int8 numero2; 
....................  
.................... /** Variables para cotrol del robot**/ 
.................... /*-Variables de control de la interrupcion del timer-*/ 
.................... unsigned int16 timerCarga; 
.................... const int16 pasoRapido = 0xFF6A; 							//velocidad máxima de avance del motor (1 paso cada 30 us -> 65386) 
.................... const int16 homingVel = 0xC568; 							//velocidad para realización del homing (1 paso cada 150 us -> 64786) 
.................... const int16 finHomingVel = 0x15A0; 							//velocidad para terminar el homing (1 paso cada 600 us -> 64786) 
.................... /*-Variables de control de pasos-*/ 
.................... const int8 STEP[] = {0x01,0x03,0x02,0x06,0x04,0x0C,0x08,0x09};	//valores para el puerto de salida de los pasos 
.................... unsigned int stepIndex;											//apuntador al paso actual 
.................... int16 posicionActual;									//variable que cuenta los pasos - representa posicion actual 
.................... int16 posicionObjetivo;									//variable que representa la posiçion objetivo 
....................  
....................  
.................... /*****************************************************************************/ 
.................... /********************** FUNCION INTERPRETA COMANDOS I2C *********************/ 
.................... /**        interpreta los comandos contenidos en la cadena comando[]        **/ 
....................  
.................... void interpreta() 
.................... { 
.................... 	//unsigned int16 aux16=0; 
.................... 	switch(orden) 
.................... 	{ 
*
00B9:  MOVF   2C,W
00BA:  XORLW  70
00BB:  BTFSC  03.2
00BC:  GOTO   0D3
00BD:  XORLW  20
00BE:  BTFSC  03.2
00BF:  GOTO   0D3
00C0:  XORLW  38
00C1:  BTFSC  03.2
00C2:  GOTO   0E3
00C3:  XORLW  20
00C4:  BTFSC  03.2
00C5:  GOTO   0E3
00C6:  XORLW  30
00C7:  BTFSC  03.2
00C8:  GOTO   0FA
00C9:  XORLW  20
00CA:  BTFSC  03.2
00CB:  GOTO   0FA
00CC:  XORLW  2C
00CD:  BTFSC  03.2
00CE:  GOTO   104
00CF:  XORLW  20
00D0:  BTFSC  03.2
00D1:  GOTO   104
00D2:  GOTO   105
.................... 		case 'p': 
.................... 		case 'P': 
.................... 			switch(numero1) 
.................... 			{ 
00D3:  MOVF   2D,W
00D4:  BTFSC  03.2
00D5:  GOTO   0DA
00D6:  XORLW  01
00D7:  BTFSC  03.2
00D8:  GOTO   0DC
00D9:  GOTO   0E2
.................... 				case 0x00: 
.................... 					estado = 0x00; 
00DA:  CLRF   29
.................... 					break; 
00DB:  GOTO   0E2
.................... 				case 0x01: 
.................... 					if (estado == 0x00) 
00DC:  MOVF   29,F
00DD:  BTFSS  03.2
00DE:  GOTO   0E1
.................... 					{ 
.................... 						estado = 0x01; 
00DF:  MOVLW  01
00E0:  MOVWF  29
.................... 					} 
.................... 					break; 
00E1:  GOTO   0E2
.................... 			} 
.................... 			break; 
00E2:  GOTO   105
.................... 		case 'h': 
.................... 		case 'H': 
.................... 			switch(numero1) 
.................... 			{ 
00E3:  MOVF   2D,W
00E4:  BTFSC  03.2
00E5:  GOTO   0EA
00E6:  XORLW  01
00E7:  BTFSC  03.2
00E8:  GOTO   0F6
00E9:  GOTO   0F9
.................... 				case 0x00: 
.................... 					if (estado == 0x01) 
00EA:  DECFSZ 29,W
00EB:  GOTO   0EF
.................... 					{ 
.................... 						estado = 0x09; 
00EC:  MOVLW  09
00ED:  MOVWF  29
.................... 					} 
.................... 					else if (estado == 0x05) 
00EE:  GOTO   0F5
00EF:  MOVF   29,W
00F0:  SUBLW  05
00F1:  BTFSS  03.2
00F2:  GOTO   0F5
.................... 					{ 
.................... 						estado = 0x0D; 
00F3:  MOVLW  0D
00F4:  MOVWF  29
.................... 					} 
.................... 					break; 
00F5:  GOTO   0F9
.................... 				case 0x01: 
.................... 					estado = 0x0B; 
00F6:  MOVLW  0B
00F7:  MOVWF  29
.................... 					break; 
00F8:  GOTO   0F9
.................... 			} 
.................... 			break; 
00F9:  GOTO   105
.................... 		case 'x': 
.................... 		case 'X': 
.................... 			disable_interrupts(INT_TIMER1); 
00FA:  BSF    03.5
00FB:  BCF    0C.0
.................... 			if (estado == 0x0D) 
00FC:  BCF    03.5
00FD:  MOVF   29,W
00FE:  SUBLW  0D
00FF:  BTFSS  03.2
0100:  GOTO   103
.................... 			{ 
.................... 				estado = 0x05; 
0101:  MOVLW  05
0102:  MOVWF  29
.................... 			} 
.................... 			break; 
0103:  GOTO   105
.................... 		case 't': 
.................... 		case 'T': 
.................... 			//aux16=get16(1); 
.................... 			//if(aux16<60000) tpaso=aux16; 
.................... 			break; 
0104:  GOTO   105
.................... 	} 
.................... } 
....................  
.................... #int_TIMER1 
.................... void  TIMER1_isr(void)  
.................... { 
.................... 	set_timer1(timerCarga);							//recarga del timer 
*
0046:  MOVF   30,W
0047:  MOVWF  0F
0048:  MOVF   2F,W
0049:  MOVWF  0E
.................... 	if (posicionObjetivo < posicionActual)			//si la posicion actual es mayor a la objetivo, decremento el indice y la posicion actual 
004A:  MOVF   35,W
004B:  SUBWF  33,W
004C:  BTFSS  03.0
004D:  GOTO   060
004E:  BTFSS  03.2
004F:  GOTO   054
0050:  MOVF   32,W
0051:  SUBWF  34,W
0052:  BTFSC  03.0
0053:  GOTO   060
.................... 	{ 
.................... 		posicionActual--; 
0054:  MOVF   32,W
0055:  BTFSC  03.2
0056:  DECF   33,F
0057:  DECF   32,F
.................... 		if(stepIndex == 0)							//verifico no exceder el limite inferior de valores posibles del indice 
0058:  MOVF   31,F
0059:  BTFSS  03.2
005A:  GOTO   05E
.................... 			stepIndex = 7; 
005B:  MOVLW  07
005C:  MOVWF  31
.................... 		else 
005D:  GOTO   05F
.................... 			stepIndex--;							 
005E:  DECF   31,F
.................... 	} 
.................... 	else if (posicionObjetivo > posicionActual)		//si la posicion actual es inferior a la objetivo, incremento el indice y la posicion actual 
005F:  GOTO   074
0060:  MOVF   33,W
0061:  SUBWF  35,W
0062:  BTFSS  03.0
0063:  GOTO   074
0064:  BTFSS  03.2
0065:  GOTO   06A
0066:  MOVF   34,W
0067:  SUBWF  32,W
0068:  BTFSC  03.0
0069:  GOTO   074
.................... 	{ 
.................... 		posicionActual++; 
006A:  INCF   32,F
006B:  BTFSC  03.2
006C:  INCF   33,F
.................... 		if(stepIndex == 7)							//verifico no exceder el limite superor de los valores posibles del indice 
006D:  MOVF   31,W
006E:  SUBLW  07
006F:  BTFSS  03.2
0070:  GOTO   073
.................... 			stepIndex = 0; 
0071:  CLRF   31
.................... 		else 
0072:  GOTO   074
.................... 			stepIndex++; 
0073:  INCF   31,F
.................... 	} 
.................... 	output_B(STEP[stepIndex]);						//actualizo el puerto que actua sobre el motor 
0074:  MOVF   31,W
0075:  CALL   03A
0076:  MOVWF  38
0077:  BSF    03.5
0078:  CLRF   06
0079:  BCF    03.5
007A:  MOVF   38,W
007B:  MOVWF  06
.................... } 
....................  
.................... /******************************************************************************/ 
.................... /***************** FUNCIÓN INTERRUPCIÓN POR RECEPCION I2C *********************/ 
.................... /**  Saltará a esta función cada vez que se detecte actividad en el bus I2C  **/ 
....................  
007C:  BCF    0C.0
007D:  BCF    0A.3
007E:  BCF    0A.4
007F:  GOTO   023
.................... #int_SSP 
.................... void  SSP_isr(void)  
.................... { 
.................... 	int incoming;							//Variable donde se recibe el byte que manda el maestro 
.................... 	fstate = i2c_isr_state();				//Lectura del estado del bus I2c la interrupción 
0080:  BSF    03.5
0081:  BTFSC  14.5
0082:  GOTO   08B
0083:  BCF    03.5
0084:  CLRF   36
0085:  BSF    03.5
0086:  BTFSS  14.2
0087:  GOTO   08B
0088:  BCF    03.5
0089:  BSF    36.7
008A:  BSF    03.5
008B:  BCF    03.5
008C:  MOVF   36,W
008D:  INCF   36,F
008E:  MOVWF  2B
.................... 	/* Solicitud de lectura del esclavo por el master */ 
.................... 	if(fstate == 0x80) {          
008F:  MOVF   2B,W
0090:  SUBLW  80
0091:  BTFSS  03.2
0092:  GOTO   0A1
.................... 		i2c_write(estado);					//Manda al maestro el estado del esclavo 
0093:  MOVF   29,W
0094:  MOVWF  39
.................... 	} 
.................... 	/* Sino está solicitando lectura es que está enviando algo */ 
.................... 	else {									//Sino es que hay dato en el bus I2C... 
*
00A0:  GOTO   105
.................... 		incoming = i2c_read();				//... lo lee 
00A1:  BCF    14.6
00A2:  BTFSS  0C.3
00A3:  GOTO   0A2
00A4:  MOVF   13,W
00A5:  BSF    14.4
00A6:  MOVWF  38
.................... 		if (fstate == 1) {					//Información recibida corresponde a la orden 
00A7:  DECFSZ 2B,W
00A8:  GOTO   0AC
.................... 			orden = incoming;				//Se guarda posición 
00A9:  MOVF   38,W
00AA:  MOVWF  2C
.................... 		} 
.................... 		else if (fstate == 2) {				//Información recibida corresponde a la primera opcion de la orden 
00AB:  GOTO   105
00AC:  MOVF   2B,W
00AD:  SUBLW  02
00AE:  BTFSS  03.2
00AF:  GOTO   0B3
.................... 			numero1 = incoming;				//Se guarda dato 
00B0:  MOVF   38,W
00B1:  MOVWF  2D
.................... 		} 
.................... 		else if (fstate == 3) {				//Información recibida corresponde a la segunda opcion de la orden 
00B2:  GOTO   105
00B3:  MOVF   2B,W
00B4:  SUBLW  03
00B5:  BTFSS  03.2
00B6:  GOTO   105
.................... 			numero2 = incoming;				//Se guarda dato 
00B7:  MOVF   38,W
00B8:  MOVWF  2E
.................... 			interpreta(); 
.................... 		} 
.................... 	} 
.................... } 
....................  
....................  
....................  
*
0105:  BCF    0C.3
0106:  BCF    0A.3
0107:  BCF    0A.4
0108:  GOTO   023
.................... void main() 
.................... { 
0109:  CLRF   04
010A:  BCF    03.7
010B:  MOVLW  1F
010C:  ANDWF  03,F
010D:  BSF    28.3
010E:  MOVF   28,W
010F:  BSF    03.5
0110:  MOVWF  07
0111:  BCF    03.5
0112:  BSF    28.4
0113:  MOVF   28,W
0114:  BSF    03.5
0115:  MOVWF  07
0116:  MOVLW  10
0117:  MOVWF  13
0118:  MOVLW  36
0119:  BCF    03.5
011A:  MOVWF  14
011B:  BSF    03.5
011C:  BSF    03.6
011D:  MOVF   09,W
011E:  ANDLW  C0
011F:  MOVWF  09
0120:  BCF    03.6
0121:  BCF    1F.4
0122:  BCF    1F.5
0123:  MOVLW  00
0124:  BSF    03.6
0125:  MOVWF  08
0126:  BCF    03.5
0127:  CLRF   07
0128:  CLRF   08
0129:  CLRF   09
.................... 	set_tris_A(0x00); 
*
012F:  MOVLW  00
0130:  BSF    03.5
0131:  MOVWF  05
.................... 	set_tris_B(0x00); 
0132:  MOVWF  06
.................... 	bit_set(TRISC,0);	//RC0 entrada 
0133:  BSF    07.0
.................... 	bit_set(TRISC,1);	//RC1 entrada 
0134:  BSF    07.1
.................... 	bit_clear(TRISC,2);	//RC2 salida 
0135:  BCF    07.2
....................  
.................... 	bit_clear(PORTC,2);	//RC2=0 
0136:  BCF    03.5
0137:  BCF    07.2
....................  
.................... 	estado = 0x00;                //Representa el estado del master 
0138:  CLRF   29
.................... 	estadoAnterior = 0x01;        //Definido con un valor diferente a estado solo a fines de que pase por el primer bucle de desenergizado 
0139:  MOVLW  01
013A:  MOVWF  2A
.................... 	 
.................... 	stepIndex = 0; 
013B:  CLRF   31
....................  
.................... 	setup_adc_ports(NO_ANALOGS|VSS_VDD);     
013C:  BSF    03.5
013D:  BSF    03.6
013E:  MOVF   09,W
013F:  ANDLW  C0
0140:  MOVWF  09
0141:  BCF    03.6
0142:  BCF    1F.4
0143:  BCF    1F.5
0144:  MOVLW  00
0145:  BSF    03.6
0146:  MOVWF  08
.................... 	setup_adc(ADC_CLOCK_DIV_2); 
0147:  BCF    03.5
0148:  BCF    03.6
0149:  BCF    1F.6
014A:  BCF    1F.7
014B:  BSF    03.5
014C:  BCF    1F.7
014D:  BCF    03.5
014E:  BSF    1F.0
.................... 	setup_timer_0(RTCC_INTERNAL|RTCC_DIV_1); 
014F:  BSF    03.5
0150:  MOVF   01,W
0151:  ANDLW  C7
0152:  IORLW  08
0153:  MOVWF  01
.................... 	setup_timer_1(T1_INTERNAL|T1_DIV_BY_1); 
0154:  MOVLW  05
0155:  BCF    03.5
0156:  MOVWF  10
.................... 	setup_timer_2(T2_DISABLED,0,1); 
0157:  MOVLW  00
0158:  MOVWF  78
0159:  MOVWF  12
015A:  MOVLW  00
015B:  BSF    03.5
015C:  MOVWF  12
.................... 	setup_comparator(NC_NC_NC_NC);// This device COMP currently not supported by the PICWizard 
015D:  BCF    03.5
015E:  BSF    03.6
015F:  CLRF   07
0160:  CLRF   08
0161:  CLRF   09
.................... 	enable_interrupts(INT_TIMER1); 
0162:  BSF    03.5
0163:  BCF    03.6
0164:  BSF    0C.0
.................... 	enable_interrupts(INT_SSP); 
0165:  BSF    0C.3
.................... 	enable_interrupts(GLOBAL); 
0166:  MOVLW  C0
0167:  BCF    03.5
0168:  IORWF  0B,F
.................... //Setup_Oscillator parameter not selected from Intr Oscillator Config tab 
....................  
.................... 	for (;;) 
.................... 	{ 
.................... 		switch(estado) 
.................... 		{ 
0169:  MOVF   29,W
016A:  BTFSC  03.2
016B:  GOTO   17F
016C:  XORLW  01
016D:  BTFSC  03.2
016E:  GOTO   18B
016F:  XORLW  0A
0170:  BTFSC  03.2
0171:  GOTO   19E
0172:  XORLW  02
0173:  BTFSC  03.2
0174:  GOTO   1E3
0175:  XORLW  04
0176:  BTFSC  03.2
0177:  GOTO   1FE
0178:  XORLW  08
0179:  BTFSC  03.2
017A:  GOTO   221
017B:  XORLW  38
017C:  BTFSC  03.2
017D:  GOTO   22E
017E:  GOTO   22F
.................... 			case 0x00:              //Desenergizar motor 
.................... 				if(estadoAnterior & 0x01) 
017F:  BTFSS  2A.0
0180:  GOTO   18A
.................... 				{ 
.................... 					estadoAnterior = estado; 
0181:  MOVF   29,W
0182:  MOVWF  2A
.................... 					disable_interrupts(INT_TIMER1); 
0183:  BSF    03.5
0184:  BCF    0C.0
.................... 					output_B(0x00); 
0185:  CLRF   06
0186:  BCF    03.5
0187:  CLRF   06
.................... 					output_A(estado); 
0188:  MOVF   29,W
0189:  MOVWF  05
.................... 				} 
.................... 				break; 
018A:  GOTO   22F
.................... 			case 0x01:              //Energizar motor 
.................... 				if (estadoAnterior == 0x00) 
018B:  MOVF   2A,F
018C:  BTFSS  03.2
018D:  GOTO   19D
.................... 				{ 
.................... 					estadoAnterior = estado; 
018E:  MOVF   29,W
018F:  MOVWF  2A
.................... 					disable_interrupts(INT_TIMER1); 
0190:  BSF    03.5
0191:  BCF    0C.0
.................... 					output_B(STEP[stepIndex]); 
0192:  BCF    03.5
0193:  MOVF   31,W
0194:  CALL   03A
0195:  MOVWF  37
0196:  BSF    03.5
0197:  CLRF   06
0198:  BCF    03.5
0199:  MOVF   37,W
019A:  MOVWF  06
.................... 					output_A(estado); 
019B:  MOVF   29,W
019C:  MOVWF  05
.................... 				} 
.................... 				break; 
019D:  GOTO   22F
.................... 			case 0x0B:              //Hacer homing 
.................... 				estadoAnterior = estado; 
019E:  MOVF   29,W
019F:  MOVWF  2A
.................... 				output_A(estado); 
01A0:  MOVF   29,W
01A1:  MOVWF  05
.................... 				output_high(PIN_C2);								//informo que estoy ocupado 
01A2:  BCF    28.2
01A3:  MOVF   28,W
01A4:  BSF    03.5
01A5:  MOVWF  07
01A6:  BCF    03.5
01A7:  BSF    07.2
.................... 				//BUSCANDO FIN DE CARRERA 
.................... 				timerCarga = homingVel; 
01A8:  MOVLW  C5
01A9:  MOVWF  30
01AA:  MOVLW  68
01AB:  MOVWF  2F
.................... 				set_timer1(timerCarga);					//Seteo la interrupcion del timer en una velocidad moderada 
01AC:  MOVF   30,W
01AD:  MOVWF  0F
01AE:  MOVF   2F,W
01AF:  MOVWF  0E
.................... 				posicionObjetivo = 10; 
01B0:  CLRF   35
01B1:  MOVLW  0A
01B2:  MOVWF  34
.................... 				enable_interrupts(INT_TIMER1);			//habilito la interrupcion del timer 
01B3:  BSF    03.5
01B4:  BSF    0C.0
.................... 				while(input(PIN_C0) == 0){						//mientras no reciba una señal del fin de carrera para homing 
01B5:  BCF    03.5
01B6:  BSF    28.0
01B7:  MOVF   28,W
01B8:  BSF    03.5
01B9:  MOVWF  07
01BA:  BCF    03.5
01BB:  BTFSC  07.0
01BC:  GOTO   1C1
.................... 					posicionActual = 100;				//actualizo la posicion actual siempre superior a la posicion objetivo para que en la interrupcion se retroceda 
01BD:  CLRF   33
01BE:  MOVLW  64
01BF:  MOVWF  32
.................... 				} 
01C0:  GOTO   1B6
.................... 				//SEPARANDOSE DEL FIN DE CARRERA 
.................... 				timerCarga = finHomingVel;					//seteo la interrupcion del timer en una velocidad lenta 
01C1:  MOVLW  15
01C2:  MOVWF  30
01C3:  MOVLW  A0
01C4:  MOVWF  2F
.................... 				posicionObjetivo = 100; 
01C5:  CLRF   35
01C6:  MOVLW  64
01C7:  MOVWF  34
.................... 				while(input(PIN_C0) == 1){						//mientras el fin de carrera hace contacto 
01C8:  BSF    28.0
01C9:  MOVF   28,W
01CA:  BSF    03.5
01CB:  MOVWF  07
01CC:  BCF    03.5
01CD:  BTFSS  07.0
01CE:  GOTO   1D3
.................... 					posicionActual = 10;					//actualiza la posicion actual a un valor inferior a la posición objetivo para que avance lentamente 
01CF:  CLRF   33
01D0:  MOVLW  0A
01D1:  MOVWF  32
.................... 				} 
01D2:  GOTO   1C8
.................... 				//FIN DEL HOMING 
.................... 				disable_interrupts(INT_TIMER1); 
01D3:  BSF    03.5
01D4:  BCF    0C.0
.................... 				output_low(PIN_C2);								//informo que estoy desocupado, que terminé de hacer el homing 
01D5:  BCF    03.5
01D6:  BCF    28.2
01D7:  MOVF   28,W
01D8:  BSF    03.5
01D9:  MOVWF  07
01DA:  BCF    03.5
01DB:  BCF    07.2
.................... 				posicionActual = 0;						//defino el origen 
01DC:  CLRF   33
01DD:  CLRF   32
.................... 				posicionObjetivo = 0;					//no tengo un objetivo nuevo 
01DE:  CLRF   35
01DF:  CLRF   34
.................... 				estado = 0x05;							//paso a estado de reposo, ya referenciado 
01E0:  MOVLW  05
01E1:  MOVWF  29
.................... 				break; 
01E2:  GOTO   22F
.................... 			case 0x09:              //avanzando ciego para permitir al otro robot hacer el homing 
.................... 				estadoAnterior = estado; 
01E3:  MOVF   29,W
01E4:  MOVWF  2A
.................... 				output_A(estado); 
01E5:  MOVF   29,W
01E6:  MOVWF  05
.................... 				//AVANZANDO 
.................... 				timerCarga = homingVel; 
01E7:  MOVLW  C5
01E8:  MOVWF  30
01E9:  MOVLW  68
01EA:  MOVWF  2F
.................... 				set_timer1(timerCarga);					//Seteo la interrupcion del timer en una velocidad moderada 
01EB:  MOVF   30,W
01EC:  MOVWF  0F
01ED:  MOVF   2F,W
01EE:  MOVWF  0E
.................... 				posicionObjetivo = 100; 
01EF:  CLRF   35
01F0:  MOVLW  64
01F1:  MOVWF  34
.................... 				enable_interrupts(INT_TIMER1);			//habilito la interrupcion del timer 
01F2:  BSF    03.5
01F3:  BSF    0C.0
.................... 				while(estado == 0x09){					//mientras no reciba una mensaje del master de cambiar de estado, dejar de avanzar 
01F4:  BCF    03.5
01F5:  MOVF   29,W
01F6:  SUBLW  09
01F7:  BTFSS  03.2
01F8:  GOTO   1FD
.................... 					posicionActual = 10;				//actualizo la posicion actual siempre superior a la posicion objetivo para que en la interrupcion avance 
01F9:  CLRF   33
01FA:  MOVLW  0A
01FB:  MOVWF  32
.................... 				} 
01FC:  GOTO   1F5
.................... 				break; 
01FD:  GOTO   22F
.................... 			case 0x0D:              //Enviar coordenadas de inicio a los esclavos 
.................... 				estadoAnterior = estado; 
01FE:  MOVF   29,W
01FF:  MOVWF  2A
.................... 				output_A(estado); 
0200:  MOVF   29,W
0201:  MOVWF  05
.................... 				//AVANZANDO 
.................... 				timerCarga = homingVel; 
0202:  MOVLW  C5
0203:  MOVWF  30
0204:  MOVLW  68
0205:  MOVWF  2F
.................... 				set_timer1(timerCarga);					//Seteo la interrupcion del timer en una velocidad moderada 
0206:  MOVF   30,W
0207:  MOVWF  0F
0208:  MOVF   2F,W
0209:  MOVWF  0E
.................... 				posicionObjetivo = posicionActual + 50;	//pongo un objetivo 'adelante' de la posicion actual 
020A:  MOVLW  32
020B:  ADDWF  32,W
020C:  MOVWF  34
020D:  MOVF   33,W
020E:  MOVWF  35
020F:  BTFSC  03.0
0210:  INCF   35,F
.................... 				enable_interrupts(INT_TIMER1);			//habilito la interrupcion del timer 
0211:  BSF    03.5
0212:  BSF    0C.0
.................... 				while(estado == 0x0D){					//mientras no reciba una mensaje del master de cambiar de estado, dejar de avanzar 
0213:  BCF    03.5
0214:  MOVF   29,W
0215:  SUBLW  0D
0216:  BTFSS  03.2
0217:  GOTO   220
.................... 					posicionObjetivo = posicionActual + 50;				//actualizo la posicion actual siempre superior a la posicion objetivo para que en la interrupcion avance 
0218:  MOVLW  32
0219:  ADDWF  32,W
021A:  MOVWF  34
021B:  MOVF   33,W
021C:  MOVWF  35
021D:  BTFSC  03.0
021E:  INCF   35,F
.................... 				} 
021F:  GOTO   214
.................... 				break; 
0220:  GOTO   22F
.................... 			case 0x05:								//Estado de reposo, energizado y referenciado 
.................... 				if (estadoAnterior != estado) 
0221:  MOVF   29,W
0222:  SUBWF  2A,W
0223:  BTFSC  03.2
0224:  GOTO   22B
.................... 				{ 
.................... 					estadoAnterior = estado; 
0225:  MOVF   29,W
0226:  MOVWF  2A
.................... 					posicionObjetivo = posicionActual;	//No hay objetivo, la posicion objetivo es la actual 
0227:  MOVF   33,W
0228:  MOVWF  35
0229:  MOVF   32,W
022A:  MOVWF  34
.................... 				}	 
.................... 				output_A(estado);		 
022B:  MOVF   29,W
022C:  MOVWF  05
.................... 				break; 
022D:  GOTO   22F
.................... 			case 0x3D:              //Enviar coordenadas de final a los esclavos 
.................... 				break; 
022E:  GOTO   22F
.................... 		} 
.................... 	} 
022F:  GOTO   169
.................... } 
0230:  SLEEP

Configuration Fuses:
   Word  1: 2CF2   HS NOWDT NOPUT MCLR NOPROTECT NOCPD NOBROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   NOWRT BORV40
