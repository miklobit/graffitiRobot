CCS PCM C Compiler, Version 4.104, 5967               14-Jul-16 01:57

               Filename: C:\Users\Nahuel\Documents\GitHub\microcontroladores\graffitiRobot\graffitiRobotSlave\2SlaveUpRight\graffitiRobotSlave2.lst

               ROM used: 766 words (9%)
                         Largest free fragment is 2048
               RAM used: 29 (8%) at main() level
                         36 (10%) worst case
               Stack:    3 worst case (1 in main + 2 for interrupts)

*
0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   17A
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BCF    03.7
0016:  BCF    03.5
0017:  MOVLW  8C
0018:  MOVWF  04
0019:  BTFSS  00.0
001A:  GOTO   01D
001B:  BTFSC  0C.0
001C:  GOTO   034
001D:  MOVLW  8C
001E:  MOVWF  04
001F:  BTFSS  00.3
0020:  GOTO   023
0021:  BTFSC  0C.3
0022:  GOTO   037
0023:  MOVF   22,W
0024:  MOVWF  04
0025:  MOVF   23,W
0026:  MOVWF  77
0027:  MOVF   24,W
0028:  MOVWF  78
0029:  MOVF   25,W
002A:  MOVWF  79
002B:  MOVF   26,W
002C:  MOVWF  7A
002D:  MOVF   20,W
002E:  MOVWF  0A
002F:  SWAPF  21,W
0030:  MOVWF  03
0031:  SWAPF  7F,F
0032:  SWAPF  7F,W
0033:  RETFIE
0034:  BCF    0A.3
0035:  BCF    0A.4
0036:  GOTO   046
0037:  BCF    0A.3
0038:  BCF    0A.4
0039:  GOTO   096
.................... #include "C:\Users\Nahuel\Documents\GitHub\microcontroladores\graffitiRobot\graffitiRobotSlave\2SlaveUpRight\graffitiRobotSlave2.h" 
.................... #include <16F886.h> 
.................... //////// Standard Header file for the PIC16F886 device //////////////// 
.................... #device PIC16F886 
.................... #list 
....................  
.................... #device adc=8 
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES HS                    	//High speed Osc (> 4mhz for PCM/PCH) (>10mhz for PCD) 
.................... #FUSES NOPUT                 	//No Power Up Timer 
.................... #FUSES MCLR                  	//Master Clear pin enabled 
.................... #FUSES NOPROTECT             	//Code not protected from reading 
.................... #FUSES NOCPD                 	//No EE protection 
.................... #FUSES NOBROWNOUT            	//No brownout reset 
.................... #FUSES IESO                  	//Internal External Switch Over mode enabled 
.................... #FUSES FCMEN                 	//Fail-safe clock monitor enabled 
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NODEBUG               	//No Debug mode for ICD 
.................... #FUSES NOWRT                 	//Program memory not write protected 
.................... #FUSES BORV40                	//Brownout reset at 4.0V 
.................... #FUSES RESERVED              	//Used to set the reserved FUSE bits 
....................  
.................... #use delay(clock=20000000) 
.................... #use i2c(Slave,Fast,sda=PIN_C4,scl=PIN_C3,address=0x20) 
*
00AB:  MOVF   39,W
00AC:  MOVWF  13
00AD:  BSF    14.4
00AE:  BCF    0C.3
00AF:  BSF    03.5
00B0:  BTFSC  14.0
00B1:  GOTO   0B0
00B2:  CLRF   78
00B3:  BCF    03.5
00B4:  BTFSC  14.4
00B5:  INCF   78,F
....................  
.................... #BYTE PORTA = 0x05 
.................... #BYTE TRISA = 0x85 
....................  
.................... #BYTE PORTB = 0x06 
.................... #BYTE TRISB = 0x86 
....................  
.................... #BYTE PORTC = 0x07 
.................... #BYTE TRISC = 0x87 
....................  
....................  
.................... /*****************************************************************************/ 
.................... /**********************        Variables Globales        *********************/ 
....................  
.................... /** Variables de estado **/ 
.................... unsigned int8 estado;                                 //variable de estado del master 
.................... unsigned int8 estadoAnterior;                         //variable que lleva el registro del estado anterior del master 
....................  
.................... /** Variables para comunicación I2C**/ 
.................... byte fstate;                                       //Guardara el estado del bus I2C 
.................... char orden; 
.................... int8 numero1; 
.................... int8 numero2; 
....................  
.................... /** Variables para cotrol del robot**/ 
.................... /*-Variables de control de la interrupcion del timer-*/ 
.................... unsigned int16 timerCarga; 
.................... const int16 pasoRapido = 0xF03C;                             //velocidad máxima de avance del motor (1 paso cada 30 us -> 65386) 
.................... const int16 homingVel = 0x9C40;                             //velocidad para realización del homing (1 paso cada 150 us -> 64786) 
.................... const int16 finHomingVel = 0x15A0;                             //velocidad para terminar el homing (1 paso cada 600 us -> 64786) 
.................... /*-Variables de control de pasos-*/ 
.................... const int8 STEP[] = {0x01,0x03,0x02,0x06,0x04,0x0C,0x08,0x09};    //valores para el puerto de salida de los pasos 
.................... unsigned int stepIndex;                                            //apuntador al paso actual 
.................... int16 posicionActual;                                    //variable que cuenta los pasos - representa posicion actual 
.................... int16 posicionObjetivo;                                    //variable que representa la posiçion objetivo 
....................  
.................... /*****************************************************************************/ 
.................... /***************** FUNCION PARA SETEO DE LA POSICION OBJETIVO ****************/ 
.................... /**                 recibe dos int8 y los agrupa en un int16                **/ 
.................... void setObjetivo(unsigned int8 numero1, unsigned int8  numero2) 
.................... { 
*
0080:  CLRF   3C
0081:  MOVF   39,W
0082:  MOVWF  3B
.................... 	int16 mayor = numero1; 
.................... 	mayor = 0xFF00 & (mayor << 8); 
0083:  MOVF   3B,W
0084:  MOVWF  7A
0085:  MOVLW  00
0086:  CLRF   3B
0087:  MOVF   7A,W
0088:  MOVWF  3C
.................... 	int16 menor = 0x00FF & numero2; 
0089:  MOVF   3A,W
008A:  MOVWF  3D
008B:  CLRF   3E
.................... 	 posicionObjetivo = mayor + menor;  
008C:  MOVF   3D,W
008D:  ADDWF  3B,W
008E:  MOVWF  34
008F:  MOVF   3C,W
0090:  MOVWF  35
0091:  MOVF   3E,W
0092:  BTFSC  03.0
0093:  INCFSZ 3E,W
0094:  ADDWF  35,F
.................... } 
0095:  RETURN
.................... /*****************************************************************************/ 
.................... /********* FUNCION PARA SETEO DEL TIEMPO DE INTERRUPCION DEL TIMER 1 *********/ 
.................... /**                 recibe dos int8 y los agrupa en un int16                **/ 
.................... void setTimer(unsigned int8 numero1, unsigned int8  numero2) 
.................... { 
*
014E:  CLRF   3C
014F:  MOVF   39,W
0150:  MOVWF  3B
.................... 	int16 mayor = numero1; 
.................... 	mayor = 0xFF00 & (mayor << 8); 
0151:  MOVF   3B,W
0152:  MOVWF  7A
0153:  MOVLW  00
0154:  CLRF   3B
0155:  MOVF   7A,W
0156:  MOVWF  3C
.................... 	int16 menor = 0x00FF & numero2; 
0157:  MOVF   3A,W
0158:  MOVWF  3D
0159:  CLRF   3E
.................... 	 timerCarga = mayor + menor;  
015A:  MOVF   3D,W
015B:  ADDWF  3B,W
015C:  MOVWF  2F
015D:  MOVF   3C,W
015E:  MOVWF  30
015F:  MOVF   3E,W
0160:  BTFSC  03.0
0161:  INCFSZ 3E,W
0162:  ADDWF  30,F
.................... }    
.................... /*****************************************************************************/ 
.................... /********************** FUNCION INTERPRETA COMANDOS I2C *********************/ 
.................... /**        interpreta los comandos contenidos en la cadena comando[]        **/ 
....................  
.................... void interpreta() 
.................... { 
.................... 	 switch(orden) 
.................... 	 { 
*
00CF:  MOVF   2C,W
00D0:  XORLW  70
00D1:  BTFSC  03.2
00D2:  GOTO   0F5
00D3:  XORLW  20
00D4:  BTFSC  03.2
00D5:  GOTO   0F5
00D6:  XORLW  38
00D7:  BTFSC  03.2
00D8:  GOTO   109
00D9:  XORLW  20
00DA:  BTFSC  03.2
00DB:  GOTO   109
00DC:  XORLW  30
00DD:  BTFSC  03.2
00DE:  GOTO   126
00DF:  XORLW  20
00E0:  BTFSC  03.2
00E1:  GOTO   126
00E2:  XORLW  35
00E3:  BTFSC  03.2
00E4:  GOTO   138
00E5:  XORLW  20
00E6:  BTFSC  03.2
00E7:  GOTO   138
00E8:  XORLW  39
00E9:  BTFSC  03.2
00EA:  GOTO   146
00EB:  XORLW  20
00EC:  BTFSC  03.2
00ED:  GOTO   146
00EE:  XORLW  30
00EF:  BTFSC  03.2
00F0:  GOTO   168
00F1:  XORLW  20
00F2:  BTFSC  03.2
00F3:  GOTO   168
00F4:  GOTO   176
.................... 		  case 'p': 
.................... 		  case 'P': 
.................... 				switch(numero1) 
.................... 				{ 
00F5:  MOVF   2D,W
00F6:  BTFSC  03.2
00F7:  GOTO   0FC
00F8:  XORLW  01
00F9:  BTFSC  03.2
00FA:  GOTO   100
00FB:  GOTO   108
.................... 					 case 0x00: 
.................... 						  estadoAnterior = estado; 
00FC:  MOVF   29,W
00FD:  MOVWF  2A
.................... 						  estado = 0x00; 
00FE:  CLRF   29
.................... 						  break; 
00FF:  GOTO   108
.................... 					 case 0x01: 
.................... 						  if (estado == 0x00) 
0100:  MOVF   29,F
0101:  BTFSS  03.2
0102:  GOTO   107
.................... 						  { 
.................... 								estadoAnterior = estado; 
0103:  MOVF   29,W
0104:  MOVWF  2A
.................... 								estado = 0x01; 
0105:  MOVLW  01
0106:  MOVWF  29
.................... 						  } 
.................... 						  break; 
0107:  GOTO   108
.................... 				} 
.................... 				break; 
0108:  GOTO   176
.................... 		  case 'h': 
.................... 		  case 'H': 
.................... 				switch(numero1) 
.................... 				{ 
0109:  MOVF   2D,W
010A:  BTFSC  03.2
010B:  GOTO   110
010C:  XORLW  01
010D:  BTFSC  03.2
010E:  GOTO   120
010F:  GOTO   125
.................... 					 case 0x00: 
.................... 						  if (estado == 0x01) 
0110:  DECFSZ 29,W
0111:  GOTO   117
.................... 						  { 
.................... 								estadoAnterior = estado; 
0112:  MOVF   29,W
0113:  MOVWF  2A
.................... 								estado = 0x09; 
0114:  MOVLW  09
0115:  MOVWF  29
.................... 						  } 
.................... 						  else if (estado == 0x05) 
0116:  GOTO   11F
0117:  MOVF   29,W
0118:  SUBLW  05
0119:  BTFSS  03.2
011A:  GOTO   11F
.................... 						  { 
.................... 								estadoAnterior = estado; 
011B:  MOVF   29,W
011C:  MOVWF  2A
.................... 								estado = 0x0D; 
011D:  MOVLW  0D
011E:  MOVWF  29
.................... 						  } 
.................... 						  break; 
011F:  GOTO   125
.................... 					 case 0x01: 
.................... 						  estadoAnterior = estado; 
0120:  MOVF   29,W
0121:  MOVWF  2A
.................... 						  estado = 0x0B; 
0122:  MOVLW  0B
0123:  MOVWF  29
.................... 						  break; 
0124:  GOTO   125
.................... 				} 
.................... 				break; 
0125:  GOTO   176
.................... 		  case 'x': 
.................... 		  case 'X': 
.................... 				if (estado == 0x0D) 
0126:  MOVF   29,W
0127:  SUBLW  0D
0128:  BTFSS  03.2
0129:  GOTO   133
.................... 				{ 
.................... 					posicionObjetivo = posicionActual; 
012A:  MOVF   33,W
012B:  MOVWF  35
012C:  MOVF   32,W
012D:  MOVWF  34
.................... 					 estadoAnterior = estado; 
012E:  MOVF   29,W
012F:  MOVWF  2A
.................... 					 estado = 0x05; 
0130:  MOVLW  05
0131:  MOVWF  29
.................... 				} 
.................... 				else 
0132:  GOTO   137
.................... 				{ 
.................... 					estadoAnterior = estado; 
0133:  MOVF   29,W
0134:  MOVWF  2A
.................... 					 estado = 0x01; 
0135:  MOVLW  01
0136:  MOVWF  29
.................... 				} 
.................... 				break; 
0137:  GOTO   176
.................... 		  case 'm': 
.................... 		  case 'M': 
.................... 				if (estado == 0x05)   
0138:  MOVF   29,W
0139:  SUBLW  05
013A:  BTFSS  03.2
013B:  GOTO   145
.................... 				{ 
.................... 					 setObjetivo(numero1, numero2);     
013C:  MOVF   2D,W
013D:  MOVWF  39
013E:  MOVF   2E,W
013F:  MOVWF  3A
0140:  CALL   080
.................... 					 estadoAnterior = estado; 
0141:  MOVF   29,W
0142:  MOVWF  2A
.................... 					 estado = 0x1D; 
0143:  MOVLW  1D
0144:  MOVWF  29
.................... 				} 
.................... 				break; 
0145:  GOTO   176
.................... 		  case 't': 
.................... 		  case 'T': 
.................... 				if (estado == 0x05) 
0146:  MOVF   29,W
0147:  SUBLW  05
0148:  BTFSS  03.2
0149:  GOTO   167
.................... 				{ 
.................... 					 setTimer(numero1, numero2);     
014A:  MOVF   2D,W
014B:  MOVWF  39
014C:  MOVF   2E,W
014D:  MOVWF  3A
.................... 					 estadoAnterior = estado; 
*
0163:  MOVF   29,W
0164:  MOVWF  2A
.................... 					 estado = 0x15; 
0165:  MOVLW  15
0166:  MOVWF  29
.................... 				} 
.................... 				break; 
0167:  GOTO   176
.................... 		  case 'd': 
.................... 		  case 'D': 
.................... 				if (estado == 0x15) 
0168:  MOVF   29,W
0169:  SUBLW  15
016A:  BTFSS  03.2
016B:  GOTO   175
.................... 				{ 
.................... 					 setObjetivo(numero1, numero2);        
016C:  MOVF   2D,W
016D:  MOVWF  39
016E:  MOVF   2E,W
016F:  MOVWF  3A
0170:  CALL   080
.................... 					 estadoAnterior = estado; 
0171:  MOVF   29,W
0172:  MOVWF  2A
.................... 					 estado = 0x2D; 
0173:  MOVLW  2D
0174:  MOVWF  29
.................... 				} 
.................... 				break; 
0175:  GOTO   176
.................... 	 } 
.................... } 
....................  
.................... #int_TIMER1 
.................... void  TIMER1_isr(void)  
.................... { 
.................... 	set_timer1(timerCarga);                   //recarga del timer 
*
0046:  MOVF   30,W
0047:  MOVWF  0F
0048:  MOVF   2F,W
0049:  MOVWF  0E
.................... 	if (posicionObjetivo < posicionActual)       //si la posicion actual es mayor a la objetivo, decremento el indice y la posicion actual 
004A:  MOVF   35,W
004B:  SUBWF  33,W
004C:  BTFSS  03.0
004D:  GOTO   060
004E:  BTFSS  03.2
004F:  GOTO   054
0050:  MOVF   32,W
0051:  SUBWF  34,W
0052:  BTFSC  03.0
0053:  GOTO   060
.................... 	{ 
.................... 		posicionActual--; 
0054:  MOVF   32,W
0055:  BTFSC  03.2
0056:  DECF   33,F
0057:  DECF   32,F
.................... 		if(stepIndex == 0)                     //verifico no exceder el limite inferior de valores posibles del indice 
0058:  MOVF   31,F
0059:  BTFSS  03.2
005A:  GOTO   05E
.................... 			stepIndex = 7; 
005B:  MOVLW  07
005C:  MOVWF  31
.................... 		else 
005D:  GOTO   05F
.................... 			stepIndex--;                      
005E:  DECF   31,F
.................... 	} 
.................... 	else if (posicionObjetivo > posicionActual)     //si la posicion actual es inferior a la objetivo, incremento el indice y la posicion actual 
005F:  GOTO   074
0060:  MOVF   33,W
0061:  SUBWF  35,W
0062:  BTFSS  03.0
0063:  GOTO   074
0064:  BTFSS  03.2
0065:  GOTO   06A
0066:  MOVF   34,W
0067:  SUBWF  32,W
0068:  BTFSC  03.0
0069:  GOTO   074
.................... 	{ 
.................... 		posicionActual++; 
006A:  INCF   32,F
006B:  BTFSC  03.2
006C:  INCF   33,F
.................... 		if(stepIndex == 7)                     //verifico no exceder el limite superor de los valores posibles del indice 
006D:  MOVF   31,W
006E:  SUBLW  07
006F:  BTFSS  03.2
0070:  GOTO   073
.................... 			stepIndex = 0; 
0071:  CLRF   31
.................... 		else 
0072:  GOTO   074
.................... 			stepIndex++; 
0073:  INCF   31,F
.................... 	} 
.................... 	output_B(STEP[stepIndex]);                  //actualizo el puerto que actua sobre el motor 
0074:  MOVF   31,W
0075:  CALL   03A
0076:  MOVWF  38
0077:  BSF    03.5
0078:  CLRF   06
0079:  BCF    03.5
007A:  MOVF   38,W
007B:  MOVWF  06
.................... } 
....................  
.................... /******************************************************************************/ 
.................... /***************** FUNCIÓN INTERRUPCIÓN POR RECEPCION I2C *********************/ 
.................... /**  Saltará a esta función cada vez que se detecte actividad en el bus I2C  **/ 
....................  
007C:  BCF    0C.0
007D:  BCF    0A.3
007E:  BCF    0A.4
007F:  GOTO   023
.................... #int_SSP 
.................... void  SSP_isr(void)  
.................... { 
.................... 	int incoming;                    //Variable donde se recibe el byte que manda el maestro 
.................... 	fstate = i2c_isr_state();           //Lectura del estado del bus I2c la interrupción 
*
0096:  BSF    03.5
0097:  BTFSC  14.5
0098:  GOTO   0A1
0099:  BCF    03.5
009A:  CLRF   36
009B:  BSF    03.5
009C:  BTFSS  14.2
009D:  GOTO   0A1
009E:  BCF    03.5
009F:  BSF    36.7
00A0:  BSF    03.5
00A1:  BCF    03.5
00A2:  MOVF   36,W
00A3:  INCF   36,F
00A4:  MOVWF  2B
.................... 	/* Solicitud de lectura del esclavo por el master */ 
.................... 	if(fstate == 0x80) {          
00A5:  MOVF   2B,W
00A6:  SUBLW  80
00A7:  BTFSS  03.2
00A8:  GOTO   0B7
.................... 		i2c_write(estado);               //Manda al maestro el estado del esclavo 
00A9:  MOVF   29,W
00AA:  MOVWF  39
.................... 	} 
.................... 	/* Sino está solicitando lectura es que está enviando algo */ 
.................... 	else {                           //Sino es que hay dato en el bus I2C... 
*
00B6:  GOTO   176
.................... 		incoming = i2c_read();           //... lo lee 
00B7:  BCF    14.6
00B8:  BTFSS  0C.3
00B9:  GOTO   0B8
00BA:  MOVF   13,W
00BB:  BSF    14.4
00BC:  MOVWF  38
.................... 		if (fstate == 1) {               //Información recibida corresponde a la orden 
00BD:  DECFSZ 2B,W
00BE:  GOTO   0C2
.................... 			orden = incoming;          //Se guarda posición 
00BF:  MOVF   38,W
00C0:  MOVWF  2C
.................... 		} 
.................... 		else if (fstate == 2) {          //Información recibida corresponde a la primera opcion de la orden 
00C1:  GOTO   176
00C2:  MOVF   2B,W
00C3:  SUBLW  02
00C4:  BTFSS  03.2
00C5:  GOTO   0C9
.................... 			numero1 = incoming;           //Se guarda dato 
00C6:  MOVF   38,W
00C7:  MOVWF  2D
.................... 		} 
.................... 		else if (fstate == 3) {          //Información recibida corresponde a la segunda opcion de la orden 
00C8:  GOTO   176
00C9:  MOVF   2B,W
00CA:  SUBLW  03
00CB:  BTFSS  03.2
00CC:  GOTO   176
.................... 			numero2 = incoming;           //Se guarda dato 
00CD:  MOVF   38,W
00CE:  MOVWF  2E
.................... 			interpreta(); 
.................... 		} 
.................... 	} 
.................... } 
....................  
....................  
....................  
*
0176:  BCF    0C.3
0177:  BCF    0A.3
0178:  BCF    0A.4
0179:  GOTO   023
.................... void main() 
.................... { 
017A:  CLRF   04
017B:  BCF    03.7
017C:  MOVLW  1F
017D:  ANDWF  03,F
017E:  BSF    28.3
017F:  MOVF   28,W
0180:  BSF    03.5
0181:  MOVWF  07
0182:  BCF    03.5
0183:  BSF    28.4
0184:  MOVF   28,W
0185:  BSF    03.5
0186:  MOVWF  07
0187:  MOVLW  20
0188:  MOVWF  13
0189:  MOVLW  36
018A:  BCF    03.5
018B:  MOVWF  14
018C:  BSF    03.5
018D:  BSF    03.6
018E:  MOVF   09,W
018F:  ANDLW  C0
0190:  MOVWF  09
0191:  BCF    03.6
0192:  BCF    1F.4
0193:  BCF    1F.5
0194:  MOVLW  00
0195:  BSF    03.6
0196:  MOVWF  08
0197:  BCF    03.5
0198:  CLRF   07
0199:  CLRF   08
019A:  CLRF   09
.................... 	set_tris_A(0x00); 
*
01A0:  MOVLW  00
01A1:  BSF    03.5
01A2:  MOVWF  05
.................... 	set_tris_B(0x00); 
01A3:  MOVWF  06
.................... 	bit_set(TRISC,0); //RC0 entrada 
01A4:  BSF    07.0
.................... 	bit_set(TRISC,1); //RC1 entrada 
01A5:  BSF    07.1
.................... 	bit_clear(TRISC,2);  //RC2 salida 
01A6:  BCF    07.2
....................  
.................... 	bit_clear(PORTC,2);  //RC2=0 
01A7:  BCF    03.5
01A8:  BCF    07.2
....................  
.................... 	estado = 0x00;                //Representa el estado del master 
01A9:  CLRF   29
.................... 	estadoAnterior = 0x01;        //Definido con un valor diferente a estado solo a fines de que pase por el primer bucle de desenergizado 
01AA:  MOVLW  01
01AB:  MOVWF  2A
.................... 	 
.................... 	stepIndex = 0; 
01AC:  CLRF   31
....................  
.................... 	setup_adc_ports(NO_ANALOGS|VSS_VDD);     
01AD:  BSF    03.5
01AE:  BSF    03.6
01AF:  MOVF   09,W
01B0:  ANDLW  C0
01B1:  MOVWF  09
01B2:  BCF    03.6
01B3:  BCF    1F.4
01B4:  BCF    1F.5
01B5:  MOVLW  00
01B6:  BSF    03.6
01B7:  MOVWF  08
.................... 	setup_adc(ADC_CLOCK_DIV_2); 
01B8:  BCF    03.5
01B9:  BCF    03.6
01BA:  BCF    1F.6
01BB:  BCF    1F.7
01BC:  BSF    03.5
01BD:  BCF    1F.7
01BE:  BCF    03.5
01BF:  BSF    1F.0
.................... 	setup_timer_0(RTCC_INTERNAL|RTCC_DIV_1); 
01C0:  BSF    03.5
01C1:  MOVF   01,W
01C2:  ANDLW  C7
01C3:  IORLW  08
01C4:  MOVWF  01
.................... 	setup_timer_1(T1_INTERNAL|T1_DIV_BY_1); 
01C5:  MOVLW  05
01C6:  BCF    03.5
01C7:  MOVWF  10
.................... 	setup_timer_2(T2_DISABLED,0,1); 
01C8:  MOVLW  00
01C9:  MOVWF  78
01CA:  MOVWF  12
01CB:  MOVLW  00
01CC:  BSF    03.5
01CD:  MOVWF  12
.................... 	setup_comparator(NC_NC_NC_NC);// This device COMP currently not supported by the PICWizard 
01CE:  BCF    03.5
01CF:  BSF    03.6
01D0:  CLRF   07
01D1:  CLRF   08
01D2:  CLRF   09
.................... 	enable_interrupts(INT_TIMER1); 
01D3:  BSF    03.5
01D4:  BCF    03.6
01D5:  BSF    0C.0
.................... 	enable_interrupts(INT_SSP); 
01D6:  BSF    0C.3
.................... 	enable_interrupts(GLOBAL); 
01D7:  MOVLW  C0
01D8:  BCF    03.5
01D9:  IORWF  0B,F
.................... //Setup_Oscillator parameter not selected from Intr Oscillator Config tab 
....................  
.................... 	for (;;) 
.................... 	{ 
.................... 		switch(estado) 
.................... 		{ 
01DA:  MOVF   29,W
01DB:  BTFSC  03.2
01DC:  GOTO   1F6
01DD:  XORLW  01
01DE:  BTFSC  03.2
01DF:  GOTO   204
01E0:  XORLW  0A
01E1:  BTFSC  03.2
01E2:  GOTO   215
01E3:  XORLW  02
01E4:  BTFSC  03.2
01E5:  GOTO   254
01E6:  XORLW  04
01E7:  BTFSC  03.2
01E8:  GOTO   270
01E9:  XORLW  08
01EA:  BTFSC  03.2
01EB:  GOTO   294
01EC:  XORLW  10
01ED:  BTFSC  03.2
01EE:  GOTO   294
01EF:  XORLW  08
01F0:  BTFSC  03.2
01F1:  GOTO   2A6
01F2:  XORLW  30
01F3:  BTFSC  03.2
01F4:  GOTO   2CE
01F5:  GOTO   2FC
.................... 			case 0x00:              //Desenergizar motor 
.................... 				if(estadoAnterior & 0x01)    //antes estaba energizado 
01F6:  BTFSS  2A.0
01F7:  GOTO   203
.................... 				{ 
.................... 					//Actualiza variables de estado 
.................... 					estadoAnterior = 0x00; 
01F8:  CLRF   2A
.................... 					output_A(estado); 
01F9:  BSF    03.5
01FA:  CLRF   05
01FB:  BCF    03.5
01FC:  MOVF   29,W
01FD:  MOVWF  05
.................... 					//Actualiza variables de control del motor 
.................... 					disable_interrupts(INT_TIMER1); 
01FE:  BSF    03.5
01FF:  BCF    0C.0
.................... 					output_B(0x00); 
0200:  CLRF   06
0201:  BCF    03.5
0202:  CLRF   06
.................... 				} 
.................... 				break; 
0203:  GOTO   2FC
.................... 			case 0x01:              //Energizar motor 
.................... 				//Actualiza variables de estado 
.................... 				output_A(estado); 
0204:  BSF    03.5
0205:  CLRF   05
0206:  BCF    03.5
0207:  MOVF   29,W
0208:  MOVWF  05
.................... 				//Actualiza variables de control del motor 
.................... 				disable_interrupts(INT_TIMER1); 
0209:  BSF    03.5
020A:  BCF    0C.0
.................... 				output_B(STEP[stepIndex]); 
020B:  BCF    03.5
020C:  MOVF   31,W
020D:  CALL   03A
020E:  MOVWF  37
020F:  BSF    03.5
0210:  CLRF   06
0211:  BCF    03.5
0212:  MOVF   37,W
0213:  MOVWF  06
.................... 				break; 
0214:  GOTO   2FC
.................... 			case 0x0B:              //Hacer homing 
.................... 				output_A(estado); 
0215:  BSF    03.5
0216:  CLRF   05
0217:  BCF    03.5
0218:  MOVF   29,W
0219:  MOVWF  05
....................                 output_high(PIN_C2);                                //informo que estoy ocupado 
021A:  BCF    28.2
021B:  MOVF   28,W
021C:  BSF    03.5
021D:  MOVWF  07
021E:  BCF    03.5
021F:  BSF    07.2
....................                 //BUSCANDO FIN DE CARRERA 
....................                 timerCarga = homingVel; 
0220:  MOVLW  9C
0221:  MOVWF  30
0222:  MOVLW  40
0223:  MOVWF  2F
....................                 set_timer1(timerCarga);                    //Seteo la interrupcion del timer en una velocidad moderada 
0224:  MOVF   30,W
0225:  MOVWF  0F
0226:  MOVF   2F,W
0227:  MOVWF  0E
....................                 posicionObjetivo = 10; 
0228:  CLRF   35
0229:  MOVLW  0A
022A:  MOVWF  34
....................                 enable_interrupts(INT_TIMER1);            //habilito la interrupcion del timer 
022B:  BSF    03.5
022C:  BSF    0C.0
....................                 while(input(PIN_C0) == 0)                //mientras no reciba una señal del fin de carrera para homing 
....................                 {                         
022D:  BCF    03.5
022E:  BSF    28.0
022F:  MOVF   28,W
0230:  BSF    03.5
0231:  MOVWF  07
0232:  BCF    03.5
0233:  BTFSC  07.0
0234:  GOTO   239
....................                     posicionActual = 100;                //actualizo la posicion actual siempre superior a la posicion objetivo para que en la interrupcion se retroceda 
0235:  CLRF   33
0236:  MOVLW  64
0237:  MOVWF  32
....................                 } 
0238:  GOTO   22E
....................                 //SEPARANDOSE DEL FIN DE CARRERA 
....................                 timerCarga = finHomingVel;                    //seteo la interrupcion del timer en una velocidad lenta 
0239:  MOVLW  15
023A:  MOVWF  30
023B:  MOVLW  A0
023C:  MOVWF  2F
....................                 posicionObjetivo = 100; 
023D:  CLRF   35
023E:  MOVLW  64
023F:  MOVWF  34
....................                 while(input(PIN_C0) == 1)                        //mientras el fin de carrera hace contacto 
....................                 { 
0240:  BSF    28.0
0241:  MOVF   28,W
0242:  BSF    03.5
0243:  MOVWF  07
0244:  BCF    03.5
0245:  BTFSS  07.0
0246:  GOTO   24B
....................                     posicionActual = 10;                    //actualiza la posicion actual a un valor inferior a la posición objetivo para que avance lentamente 
0247:  CLRF   33
0248:  MOVLW  0A
0249:  MOVWF  32
....................                 } 
024A:  GOTO   240
....................                 //FIN DEL HOMING 
....................                 posicionActual = 0;                        //defino el origen 
024B:  CLRF   33
024C:  CLRF   32
....................                 posicionObjetivo = 0;                    //no tengo un objetivo nuevo 
024D:  CLRF   35
024E:  CLRF   34
....................                 estadoAnterior = 0x0B; 
024F:  MOVLW  0B
0250:  MOVWF  2A
....................                 estado = 0x05;                            //paso a estado de reposo, ya referenciado 
0251:  MOVLW  05
0252:  MOVWF  29
....................                 break; 
0253:  GOTO   2FC
.................... 			case 0x09:              //avanzando ciego para permitir al otro robot hacer el homing 
....................                 //Actualiza variables de estado 
....................                 output_A(estado); 
0254:  BSF    03.5
0255:  CLRF   05
0256:  BCF    03.5
0257:  MOVF   29,W
0258:  MOVWF  05
....................              
....................                 //Actualiza variables de control del motor 
....................                 //AVANZANDO 
....................                 timerCarga = homingVel; 
0259:  MOVLW  9C
025A:  MOVWF  30
025B:  MOVLW  40
025C:  MOVWF  2F
....................                 set_timer1(timerCarga);                    //Seteo la interrupcion del timer en una velocidad moderada 
025D:  MOVF   30,W
025E:  MOVWF  0F
025F:  MOVF   2F,W
0260:  MOVWF  0E
....................                 posicionObjetivo = 100; 
0261:  CLRF   35
0262:  MOVLW  64
0263:  MOVWF  34
....................                 enable_interrupts(INT_TIMER1);            //habilito la interrupcion del timer 
0264:  BSF    03.5
0265:  BSF    0C.0
....................                  
....................                 //Loop para desplazarce hasta que el master indique detenerse (orden 'X') 
....................                 while(estado == 0x09){                    //mientras no reciba una mensaje del master de cambiar de estado, dejar de avanzar 
0266:  BCF    03.5
0267:  MOVF   29,W
0268:  SUBLW  09
0269:  BTFSS  03.2
026A:  GOTO   26F
....................                     posicionActual = 10;                //actualizo la posicion actual siempre superior a la posicion objetivo para que en la interrupcion avance 
026B:  CLRF   33
026C:  MOVLW  0A
026D:  MOVWF  32
....................                 } 
026E:  GOTO   267
....................                 break; 
026F:  GOTO   2FC
....................             case 0x0D:              //avanza para permitir al otro motor hacer homing, sin perder la referencia 
....................                 //Actualiza variables de estado 
....................                 output_A(estado); 
0270:  BSF    03.5
0271:  CLRF   05
0272:  BCF    03.5
0273:  MOVF   29,W
0274:  MOVWF  05
....................  
....................                 //Actualiza variables de control del motor 
....................                 //AVANZANDO 
....................                 timerCarga = homingVel; 
0275:  MOVLW  9C
0276:  MOVWF  30
0277:  MOVLW  40
0278:  MOVWF  2F
....................                 set_timer1(timerCarga);                    //Seteo la interrupcion del timer en una velocidad moderada 
0279:  MOVF   30,W
027A:  MOVWF  0F
027B:  MOVF   2F,W
027C:  MOVWF  0E
....................                 posicionObjetivo = posicionActual + 50;    //pongo un objetivo 'adelante' de la posicion actual 
027D:  MOVLW  32
027E:  ADDWF  32,W
027F:  MOVWF  34
0280:  MOVF   33,W
0281:  MOVWF  35
0282:  BTFSC  03.0
0283:  INCF   35,F
....................                 enable_interrupts(INT_TIMER1);            //habilito la interrupcion del timer 
0284:  BSF    03.5
0285:  BSF    0C.0
....................  
....................                 //Loop para desplazarce hasta que el master indique detenerse (orden 'X') 
....................                 while(estado == 0x0D){                    //mientras no reciba una mensaje del master de cambiar de estado, dejar de avanzar 
0286:  BCF    03.5
0287:  MOVF   29,W
0288:  SUBLW  0D
0289:  BTFSS  03.2
028A:  GOTO   293
....................                     posicionObjetivo = posicionActual + 50;                //actualizo la posicion actual siempre superior a la posicion objetivo para que en la interrupcion avance 
028B:  MOVLW  32
028C:  ADDWF  32,W
028D:  MOVWF  34
028E:  MOVF   33,W
028F:  MOVWF  35
0290:  BTFSC  03.0
0291:  INCF   35,F
....................                 } 
0292:  GOTO   287
....................                 break; 
0293:  GOTO   2FC
....................             case 0x05: 
....................             case 0x15:                                //Estado de reposo, energizado y referenciado 
....................                 if (estadoAnterior & 0x08)    //anteriormente se estaba moviendo 
0294:  BTFSS  2A.3
0295:  GOTO   2A5
....................                 { 
....................                     //Actualiza variables de estado 
....................                     estadoAnterior = estadoAnterior & 0xEF;	//pongo a 0 el bit que indica movimiento 
0296:  BCF    2A.4
....................                     output_low(PIN_C2);                                //informo que estoy desocupado 
0297:  BCF    28.2
0298:  MOVF   28,W
0299:  BSF    03.5
029A:  MOVWF  07
029B:  BCF    03.5
029C:  BCF    07.2
....................                     output_A(estado); 
029D:  BSF    03.5
029E:  CLRF   05
029F:  BCF    03.5
02A0:  MOVF   29,W
02A1:  MOVWF  05
....................  
....................                     //Actualiza variables de control del motor 
....................                     disable_interrupts(INT_TIMER1); 
02A2:  BSF    03.5
02A3:  BCF    0C.0
02A4:  BCF    03.5
....................                 } 
....................                 break; 
02A5:  GOTO   2FC
....................             case 0x1D: 
....................                 //Actualiza variables de estado 
....................                 output_A(estado); 
02A6:  BSF    03.5
02A7:  CLRF   05
02A8:  BCF    03.5
02A9:  MOVF   29,W
02AA:  MOVWF  05
....................                 output_high(PIN_C2);                                //informo que estoy ocupado 
02AB:  BCF    28.2
02AC:  MOVF   28,W
02AD:  BSF    03.5
02AE:  MOVWF  07
02AF:  BCF    03.5
02B0:  BSF    07.2
....................  
....................                 //Actualiza variables de control del motor 
....................                 timerCarga = pasoRapido; 
02B1:  MOVLW  F0
02B2:  MOVWF  30
02B3:  MOVLW  3C
02B4:  MOVWF  2F
....................                 set_timer1(timerCarga); 
02B5:  MOVF   30,W
02B6:  MOVWF  0F
02B7:  MOVF   2F,W
02B8:  MOVWF  0E
....................                 enable_interrupts(INT_TIMER1); 
02B9:  BSF    03.5
02BA:  BSF    0C.0
....................                  
....................                 //Loop hasta llegar a la posición objetivo 
....................                 while(estado == 0x1D)    //el bucle no es while(posicionActual!=posicionObjetivo) para permitir cortar el avance con la orden 'X'                { 
....................                 { 
02BB:  BCF    03.5
02BC:  MOVF   29,W
02BD:  SUBLW  1D
02BE:  BTFSS  03.2
02BF:  GOTO   2C9
.................... 	                if (posicionActual == posicionObjetivo) 
02C0:  MOVF   34,W
02C1:  SUBWF  32,W
02C2:  BTFSS  03.2
02C3:  GOTO   2C8
02C4:  MOVF   35,W
02C5:  SUBWF  33,W
02C6:  BTFSC  03.2
....................                         break; 
02C7:  GOTO   2C9
....................                 } 
02C8:  GOTO   2BC
....................                 estadoAnterior = 0x1D; 
02C9:  MOVLW  1D
02CA:  MOVWF  2A
....................                 estado = 0x05; 
02CB:  MOVLW  05
02CC:  MOVWF  29
....................                 break; 
02CD:  GOTO   2FC
....................             case 0x2D: 
....................                 //Actualiza variables de estado 
....................                 output_A(estado); 
02CE:  BSF    03.5
02CF:  CLRF   05
02D0:  BCF    03.5
02D1:  MOVF   29,W
02D2:  MOVWF  05
....................  
....................                 while(input(PIN_C1) == 0){	//Espera a que el dispositivo de escritura sea accionado 
02D3:  BSF    28.1
02D4:  MOVF   28,W
02D5:  BSF    03.5
02D6:  MOVWF  07
02D7:  BCF    03.5
02D8:  BTFSS  07.1
....................                 } 
02D9:  GOTO   2D3
....................  
....................                 //Actualiza variables de control del motor 
....................                 enable_interrupts(INT_TIMER1); 
02DA:  BSF    03.5
02DB:  BSF    0C.0
....................  
....................                 output_high(PIN_C2);                                //informo que estoy ocupado 
02DC:  BCF    03.5
02DD:  BCF    28.2
02DE:  MOVF   28,W
02DF:  BSF    03.5
02E0:  MOVWF  07
02E1:  BCF    03.5
02E2:  BSF    07.2
....................                  
....................                 //Loop hasta llegar a la posición objetivo 
....................                 while((estado == 0x2D) && (input(PIN_C1)==1))    //el bucle no es while(posicionActual!=posicionObjetivo) para permitir cortar el avance con la orden 'X'                { 
....................                 { 
02E3:  MOVF   29,W
02E4:  SUBLW  2D
02E5:  BTFSS  03.2
02E6:  GOTO   2F7
02E7:  BSF    28.1
02E8:  MOVF   28,W
02E9:  BSF    03.5
02EA:  MOVWF  07
02EB:  BCF    03.5
02EC:  BTFSS  07.1
02ED:  GOTO   2F7
.................... 	                if (posicionActual == posicionObjetivo) 
02EE:  MOVF   34,W
02EF:  SUBWF  32,W
02F0:  BTFSS  03.2
02F1:  GOTO   2F6
02F2:  MOVF   35,W
02F3:  SUBWF  33,W
02F4:  BTFSC  03.2
....................                         break; 
02F5:  GOTO   2F7
....................                 } 
02F6:  GOTO   2E3
....................                 estadoAnterior = 0x2D; 
02F7:  MOVLW  2D
02F8:  MOVWF  2A
....................                 estado = 0x05; 
02F9:  MOVLW  05
02FA:  MOVWF  29
....................                 break; 
02FB:  GOTO   2FC
....................         } 
....................     } 
02FC:  GOTO   1DA
.................... } 
02FD:  SLEEP

Configuration Fuses:
   Word  1: 2CF2   HS NOWDT NOPUT MCLR NOPROTECT NOCPD NOBROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   NOWRT BORV40
