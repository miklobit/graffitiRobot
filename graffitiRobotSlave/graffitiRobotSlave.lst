CCS PCM C Compiler, Version 4.104, 5967               02-Aug-16 02:08

               Filename: C:\Users\Nahuel\Documents\GitHub\microcontroladores\graffitiRobot\graffitiRobotSlave\graffitiRobotSlave.lst

               ROM used: 816 words (10%)
                         Largest free fragment is 2048
               RAM used: 35 (10%) at main() level
                         42 (11%) worst case
               Stack:    3 worst case (1 in main + 2 for interrupts)

*
0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   18E
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BCF    03.7
0016:  BCF    03.5
0017:  MOVLW  8C
0018:  MOVWF  04
0019:  BTFSS  00.0
001A:  GOTO   01D
001B:  BTFSC  0C.0
001C:  GOTO   034
001D:  MOVLW  8C
001E:  MOVWF  04
001F:  BTFSS  00.3
0020:  GOTO   023
0021:  BTFSC  0C.3
0022:  GOTO   037
0023:  MOVF   22,W
0024:  MOVWF  04
0025:  MOVF   23,W
0026:  MOVWF  77
0027:  MOVF   24,W
0028:  MOVWF  78
0029:  MOVF   25,W
002A:  MOVWF  79
002B:  MOVF   26,W
002C:  MOVWF  7A
002D:  MOVF   20,W
002E:  MOVWF  0A
002F:  SWAPF  21,W
0030:  MOVWF  03
0031:  SWAPF  7F,F
0032:  SWAPF  7F,W
0033:  RETFIE
0034:  BCF    0A.3
0035:  BCF    0A.4
0036:  GOTO   046
0037:  BCF    0A.3
0038:  BCF    0A.4
0039:  GOTO   096
.................... #include "C:\Users\Nahuel\Documents\GitHub\microcontroladores\graffitiRobot\graffitiRobotSlave\graffitiRobotSlave.h" 
.................... #include <16F886.h> 
.................... //////// Standard Header file for the PIC16F886 device //////////////// 
.................... #device PIC16F886 
.................... #list 
....................  
.................... #device adc=8 
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES INTRC                    	//High speed Osc (> 4mhz for PCM/PCH) (>10mhz for PCD) 
.................... #FUSES NOPUT                 	//No Power Up Timer 
.................... #FUSES MCLR                  	//Master Clear pin enabled 
.................... #FUSES NOPROTECT             	//Code not protected from reading 
.................... #FUSES NOCPD                 	//No EE protection 
.................... #FUSES NOBROWNOUT            	//No brownout reset 
.................... #FUSES IESO                  	//Internal External Switch Over mode enabled 
.................... #FUSES FCMEN                 	//Fail-safe clock monitor enabled 
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NODEBUG               	//No Debug mode for ICD 
.................... #FUSES NOWRT                 	//Program memory not write protected 
.................... #FUSES BORV40                	//Brownout reset at 4.0V 
.................... #FUSES RESERVED              	//Used to set the reserved FUSE bits 
....................  
.................... #use delay(clock=8000000) 
*
017A:  MOVLW  3D
017B:  MOVWF  04
017C:  BCF    03.7
017D:  MOVF   00,W
017E:  BTFSC  03.2
017F:  GOTO   18D
0180:  MOVLW  02
0181:  MOVWF  78
0182:  CLRF   77
0183:  DECFSZ 77,F
0184:  GOTO   183
0185:  DECFSZ 78,F
0186:  GOTO   182
0187:  MOVLW  97
0188:  MOVWF  77
0189:  DECFSZ 77,F
018A:  GOTO   189
018B:  DECFSZ 00,F
018C:  GOTO   180
018D:  RETURN
.................... #use i2c(Slave,Fast,sda=PIN_C4,scl=PIN_C3,address=0x1F) 
*
00AB:  MOVF   3F,W
00AC:  MOVWF  13
00AD:  BSF    14.4
00AE:  BCF    0C.3
00AF:  BSF    03.5
00B0:  BTFSC  14.0
00B1:  GOTO   0B0
00B2:  CLRF   78
00B3:  BCF    03.5
00B4:  BTFSC  14.4
00B5:  INCF   78,F
.................... #use fast_io(A) 
....................  
.................... #BYTE PORTA = 0x05 
.................... #BYTE TRISA = 0x85 
....................  
.................... #BYTE PORTB = 0x06 
.................... #BYTE TRISB = 0x86 
....................  
.................... #BYTE PORTC = 0x07 
.................... #BYTE TRISC = 0x87 
....................  
.................... #BYTE SSPADD = 0x93 
....................  
....................  
....................  
.................... /*****************************************************************************/ 
.................... /**********************        Variables Globales        *********************/ 
....................  
.................... /** Variables de estado **/ 
.................... unsigned int8 estado;                                            //variable de estado del master 
.................... unsigned int8 estadoAnterior;                                    //variable que lleva el registro del estado anterior del master 
....................  
.................... /** Variables para comunicación I2C**/ 
.................... byte fstate;                                                    //Guardara el estado del bus I2C 
.................... char orden; 
.................... int8 numero1; 
.................... int8 numero2; 
....................  
.................... /** Variables para cotrol del robot**/ 
.................... // #define Fclock 20000000 //Frecuencia del oscilador	20MHz 
.................... // #define Fcy Fclock/4    //Frecuencia Interna 		5MHz 
.................... // #define T1pre   1       //Prescaler Timer1 
.................... // #define fTimer1	Fcy/T1pre //Freciencia Timer1 		5MHz 
.................... // #define tTimer1_NS	1000000000/fTimer1 //Periodo del Timer1 en nseg	200 nseg 
....................  
.................... #define OVERHEAD 50	//VERIFICAR? 
.................... // #define PASORAPIDO_NS 30000 
.................... // #define PASOHOMING_NS 150000 
.................... // #define PASOFINHOMING_NS 600000 
....................  
.................... /*-Variables de control de la interrupcion del timer-*/ 
.................... unsigned int16 timerCarga; 
.................... // int16 tt1 = 200;//(int16)(1000000000/((20000000/4)/T1pre)); 
.................... // int16 tPasoRapido = (int16)(30000/tt1); 
.................... // int16 tPasoHoming = (int16)(150000/tt1); 
.................... // int16 tPasoFinHoming = (int16)(600000/tt1); 
....................  
.................... int16 pasoRapido = 0xFFFF - OVERHEAD - 0x064E;          //velocidad máxima de avance del motor (1 paso cada 807 us -> 61500) 
.................... int16 homingVel = 0xFFFF - OVERHEAD - 0x27E6;           //velocidad para realización del homing (1 paso cada 5.107 ms -> 40000) 
.................... int16 finHomingVel = 0xFFFF - OVERHEAD - 0x5DC0;		//velocidad para terminar el homing (1 paso cada 12ms -> 5535) 
.................... /*-Variables de control de pasos-*/ 
.................... const int8 STEP[] = {0x01,0x03,0x02,0x06,0x04,0x0C,0x08,0x09};    //valores para el puerto de salida de los pasos 
.................... unsigned int stepIndex;                                            //apuntador al paso actual 
.................... int16 posicionActual;                                    //variable que cuenta los pasos - representa posicion actual 
.................... int16 posicionObjetivo;                                    //variable que representa la posiçion objetivo 
....................  
.................... /*****************************************************************************/ 
.................... /***************** FUNCION PARA SETEO DE LA POSICION OBJETIVO ****************/ 
.................... /**                 recibe dos int8 y los agrupa en un int16                **/ 
.................... void setObjetivo(unsigned int8 numero1, unsigned int8  numero2) 
.................... { 
*
0080:  CLRF   42
0081:  MOVF   3F,W
0082:  MOVWF  41
.................... 	int16 mayor = numero1; 
.................... 	mayor = 0xFF00 & (mayor << 8); 
0083:  MOVF   41,W
0084:  MOVWF  7A
0085:  MOVLW  00
0086:  CLRF   41
0087:  MOVF   7A,W
0088:  MOVWF  42
.................... 	int16 menor = 0x00FF & numero2; 
0089:  MOVF   40,W
008A:  MOVWF  43
008B:  CLRF   44
....................     posicionObjetivo = mayor + menor;  
008C:  MOVF   43,W
008D:  ADDWF  41,W
008E:  MOVWF  3A
008F:  MOVF   42,W
0090:  MOVWF  3B
0091:  MOVF   44,W
0092:  BTFSC  03.0
0093:  INCFSZ 44,W
0094:  ADDWF  3B,F
.................... } 
0095:  RETURN
.................... /*****************************************************************************/ 
.................... /********* FUNCION PARA SETEO DEL TIEMPO DE INTERRUPCION DEL TIMER 1 *********/ 
.................... /**                 recibe dos int8 y los agrupa en un int16                **/ 
.................... void setTimer(unsigned int8 numero1, unsigned int8  numero2) 
.................... { 
*
014E:  CLRF   42
014F:  MOVF   3F,W
0150:  MOVWF  41
.................... 	int16 mayor = numero1; 
.................... 	mayor = 0xFF00 & (mayor << 8); 
0151:  MOVF   41,W
0152:  MOVWF  7A
0153:  MOVLW  00
0154:  CLRF   41
0155:  MOVF   7A,W
0156:  MOVWF  42
.................... 	int16 menor = 0x00FF & numero2; 
0157:  MOVF   40,W
0158:  MOVWF  43
0159:  CLRF   44
....................     timerCarga = mayor + menor;  
015A:  MOVF   43,W
015B:  ADDWF  41,W
015C:  MOVWF  2F
015D:  MOVF   42,W
015E:  MOVWF  30
015F:  MOVF   44,W
0160:  BTFSC  03.0
0161:  INCFSZ 44,W
0162:  ADDWF  30,F
.................... }    
....................  
.................... /*****************************************************************************/ 
.................... /********************** FUNCION INTERPRETA COMANDOS I2C *********************/ 
.................... /**        interpreta los comandos contenidos en la cadena comando[]        **/ 
....................  
.................... void interpreta() 
.................... { 
....................     switch(orden) 
....................     { 
*
00CF:  MOVF   2C,W
00D0:  XORLW  70
00D1:  BTFSC  03.2
00D2:  GOTO   0F5
00D3:  XORLW  20
00D4:  BTFSC  03.2
00D5:  GOTO   0F5
00D6:  XORLW  38
00D7:  BTFSC  03.2
00D8:  GOTO   109
00D9:  XORLW  20
00DA:  BTFSC  03.2
00DB:  GOTO   109
00DC:  XORLW  30
00DD:  BTFSC  03.2
00DE:  GOTO   126
00DF:  XORLW  20
00E0:  BTFSC  03.2
00E1:  GOTO   126
00E2:  XORLW  35
00E3:  BTFSC  03.2
00E4:  GOTO   138
00E5:  XORLW  20
00E6:  BTFSC  03.2
00E7:  GOTO   138
00E8:  XORLW  39
00E9:  BTFSC  03.2
00EA:  GOTO   146
00EB:  XORLW  20
00EC:  BTFSC  03.2
00ED:  GOTO   146
00EE:  XORLW  30
00EF:  BTFSC  03.2
00F0:  GOTO   168
00F1:  XORLW  20
00F2:  BTFSC  03.2
00F3:  GOTO   168
00F4:  GOTO   176
....................         case 'p': 
....................         case 'P': 
....................             switch(numero1) 
....................             { 
00F5:  MOVF   2D,W
00F6:  BTFSC  03.2
00F7:  GOTO   0FC
00F8:  XORLW  01
00F9:  BTFSC  03.2
00FA:  GOTO   100
00FB:  GOTO   108
....................                 case 0x00: 
....................                     estadoAnterior = estado; 
00FC:  MOVF   29,W
00FD:  MOVWF  2A
....................                     estado = 0x00; 
00FE:  CLRF   29
....................                     break; 
00FF:  GOTO   108
....................                 case 0x01: 
....................                     if (estado == 0x00) 
0100:  MOVF   29,F
0101:  BTFSS  03.2
0102:  GOTO   107
....................                     { 
....................                         estadoAnterior = estado; 
0103:  MOVF   29,W
0104:  MOVWF  2A
....................                         estado = 0x01; 
0105:  MOVLW  01
0106:  MOVWF  29
....................                     } 
....................                     break; 
0107:  GOTO   108
....................             } 
....................             break; 
0108:  GOTO   176
....................         case 'h': 
....................         case 'H': 
....................             switch(numero1) 
....................             { 
0109:  MOVF   2D,W
010A:  BTFSC  03.2
010B:  GOTO   110
010C:  XORLW  01
010D:  BTFSC  03.2
010E:  GOTO   120
010F:  GOTO   125
....................                 case 0x00: 
....................                     if (estado == 0x01) 
0110:  DECFSZ 29,W
0111:  GOTO   117
....................                     { 
....................                         estadoAnterior = estado; 
0112:  MOVF   29,W
0113:  MOVWF  2A
....................                         estado = 0x09; 
0114:  MOVLW  09
0115:  MOVWF  29
....................                     } 
....................                     else if (estado == 0x05) 
0116:  GOTO   11F
0117:  MOVF   29,W
0118:  SUBLW  05
0119:  BTFSS  03.2
011A:  GOTO   11F
....................                     { 
....................                         estadoAnterior = estado; 
011B:  MOVF   29,W
011C:  MOVWF  2A
....................                         estado = 0x0F; 
011D:  MOVLW  0F
011E:  MOVWF  29
....................                     } 
....................                     break; 
011F:  GOTO   125
....................                 case 0x01: 
....................                     estadoAnterior = estado; 
0120:  MOVF   29,W
0121:  MOVWF  2A
....................                     estado = 0x0B; 
0122:  MOVLW  0B
0123:  MOVWF  29
....................                     break; 
0124:  GOTO   125
....................             } 
....................             break; 
0125:  GOTO   176
....................         case 'x': 
....................         case 'X': 
....................             if (estado == 0x0F) 
0126:  MOVF   29,W
0127:  SUBLW  0F
0128:  BTFSS  03.2
0129:  GOTO   133
....................             { 
....................             	posicionObjetivo = posicionActual; 
012A:  MOVF   39,W
012B:  MOVWF  3B
012C:  MOVF   38,W
012D:  MOVWF  3A
....................                 estadoAnterior = estado; 
012E:  MOVF   29,W
012F:  MOVWF  2A
....................                 estado = 0x05; 
0130:  MOVLW  05
0131:  MOVWF  29
....................             } 
....................             else 
0132:  GOTO   137
....................             { 
....................             	estadoAnterior = estado; 
0133:  MOVF   29,W
0134:  MOVWF  2A
....................                 estado = 0x01; 
0135:  MOVLW  01
0136:  MOVWF  29
....................             } 
....................             break; 
0137:  GOTO   176
....................         case 'm': 
....................         case 'M': 
....................             if (estado == 0x05)	 
0138:  MOVF   29,W
0139:  SUBLW  05
013A:  BTFSS  03.2
013B:  GOTO   145
....................             { 
....................                 setObjetivo(numero1, numero2);     
013C:  MOVF   2D,W
013D:  MOVWF  3F
013E:  MOVF   2E,W
013F:  MOVWF  40
0140:  CALL   080
....................                 estadoAnterior = estado; 
0141:  MOVF   29,W
0142:  MOVWF  2A
....................                 estado = 0x0D; 
0143:  MOVLW  0D
0144:  MOVWF  29
....................             } 
....................             break; 
0145:  GOTO   176
....................         case 't': 
....................         case 'T': 
....................             if (estado == 0x05) 
0146:  MOVF   29,W
0147:  SUBLW  05
0148:  BTFSS  03.2
0149:  GOTO   167
....................             { 
....................                 setTimer(numero1, numero2);     
014A:  MOVF   2D,W
014B:  MOVWF  3F
014C:  MOVF   2E,W
014D:  MOVWF  40
....................                 estadoAnterior = estado; 
*
0163:  MOVF   29,W
0164:  MOVWF  2A
....................                 estado = 0x15; 
0165:  MOVLW  15
0166:  MOVWF  29
....................             } 
....................             break; 
0167:  GOTO   176
....................         case 'd': 
....................         case 'D': 
....................             if (estado == 0x15) 
0168:  MOVF   29,W
0169:  SUBLW  15
016A:  BTFSS  03.2
016B:  GOTO   175
....................             { 
....................                 setObjetivo(numero1, numero2);        
016C:  MOVF   2D,W
016D:  MOVWF  3F
016E:  MOVF   2E,W
016F:  MOVWF  40
0170:  CALL   080
....................                 estadoAnterior = estado; 
0171:  MOVF   29,W
0172:  MOVWF  2A
....................                 estado = 0x2D; 
0173:  MOVLW  2D
0174:  MOVWF  29
....................             } 
....................             break; 
0175:  GOTO   176
....................     } 
.................... } 
....................  
.................... #int_TIMER1 
.................... void  TIMER1_isr(void)  
.................... { 
....................     set_timer1(timerCarga);                            //recarga del timer 
*
0046:  MOVF   30,W
0047:  MOVWF  0F
0048:  MOVF   2F,W
0049:  MOVWF  0E
....................     if (posicionObjetivo < posicionActual)            //si la posicion actual es mayor a la objetivo, decremento el indice y la posicion actual 
004A:  MOVF   3B,W
004B:  SUBWF  39,W
004C:  BTFSS  03.0
004D:  GOTO   060
004E:  BTFSS  03.2
004F:  GOTO   054
0050:  MOVF   38,W
0051:  SUBWF  3A,W
0052:  BTFSC  03.0
0053:  GOTO   060
....................     { 
....................         posicionActual--; 
0054:  MOVF   38,W
0055:  BTFSC  03.2
0056:  DECF   39,F
0057:  DECF   38,F
....................         if(stepIndex == 0)                            //verifico no exceder el limite inferior de valores posibles del indice 
0058:  MOVF   37,F
0059:  BTFSS  03.2
005A:  GOTO   05E
....................             stepIndex = 7; 
005B:  MOVLW  07
005C:  MOVWF  37
....................         else 
005D:  GOTO   05F
....................             stepIndex--;                             
005E:  DECF   37,F
....................     } 
....................     else if (posicionObjetivo > posicionActual)        //si la posicion actual es inferior a la objetivo, incremento el indice y la posicion actual 
005F:  GOTO   074
0060:  MOVF   39,W
0061:  SUBWF  3B,W
0062:  BTFSS  03.0
0063:  GOTO   074
0064:  BTFSS  03.2
0065:  GOTO   06A
0066:  MOVF   3A,W
0067:  SUBWF  38,W
0068:  BTFSC  03.0
0069:  GOTO   074
....................     { 
....................         posicionActual++; 
006A:  INCF   38,F
006B:  BTFSC  03.2
006C:  INCF   39,F
....................         if(stepIndex == 7)                            //verifico no exceder el limite superor de los valores posibles del indice 
006D:  MOVF   37,W
006E:  SUBLW  07
006F:  BTFSS  03.2
0070:  GOTO   073
....................             stepIndex = 0; 
0071:  CLRF   37
....................         else 
0072:  GOTO   074
....................             stepIndex++; 
0073:  INCF   37,F
....................     } 
....................     output_B(STEP[stepIndex]);                        //actualizo el puerto que actua sobre el motor 
0074:  MOVF   37,W
0075:  CALL   03A
0076:  MOVWF  3E
0077:  BSF    03.5
0078:  CLRF   06
0079:  BCF    03.5
007A:  MOVF   3E,W
007B:  MOVWF  06
.................... } 
....................  
.................... /******************************************************************************/ 
.................... /***************** FUNCIÓN INTERRUPCIÓN POR RECEPCION I2C *********************/ 
.................... /**  Saltará a esta función cada vez que se detecte actividad en el bus I2C  **/ 
....................  
007C:  BCF    0C.0
007D:  BCF    0A.3
007E:  BCF    0A.4
007F:  GOTO   023
.................... #int_SSP 
.................... void  SSP_isr(void)  
.................... { 
....................     int incoming;                            //Variable donde se recibe el byte que manda el maestro 
....................     fstate = i2c_isr_state();                //Lectura del estado del bus I2c la interrupción 
*
0096:  BSF    03.5
0097:  BTFSC  14.5
0098:  GOTO   0A1
0099:  BCF    03.5
009A:  CLRF   3C
009B:  BSF    03.5
009C:  BTFSS  14.2
009D:  GOTO   0A1
009E:  BCF    03.5
009F:  BSF    3C.7
00A0:  BSF    03.5
00A1:  BCF    03.5
00A2:  MOVF   3C,W
00A3:  INCF   3C,F
00A4:  MOVWF  2B
....................     /* Solicitud de lectura del esclavo por el master */ 
....................     if(fstate == 0x80) {          
00A5:  MOVF   2B,W
00A6:  SUBLW  80
00A7:  BTFSS  03.2
00A8:  GOTO   0B7
....................         i2c_write(estado);                    //Manda al maestro el estado del esclavo 
00A9:  MOVF   29,W
00AA:  MOVWF  3F
....................     } 
....................     /* Sino está solicitando lectura es que está enviando algo */ 
....................     else {                                    //Sino es que hay dato en el bus I2C... 
*
00B6:  GOTO   176
....................         incoming = i2c_read();                //... lo lee 
00B7:  BCF    14.6
00B8:  BTFSS  0C.3
00B9:  GOTO   0B8
00BA:  MOVF   13,W
00BB:  BSF    14.4
00BC:  MOVWF  3E
....................         if (fstate == 1) {                    //Información recibida corresponde a la orden 
00BD:  DECFSZ 2B,W
00BE:  GOTO   0C2
....................             orden = incoming;                //Se guarda posición 
00BF:  MOVF   3E,W
00C0:  MOVWF  2C
....................         } 
....................         else if (fstate == 2) {                //Información recibida corresponde a la primera opcion de la orden 
00C1:  GOTO   176
00C2:  MOVF   2B,W
00C3:  SUBLW  02
00C4:  BTFSS  03.2
00C5:  GOTO   0C9
....................             numero1 = incoming;                //Se guarda dato 
00C6:  MOVF   3E,W
00C7:  MOVWF  2D
....................         } 
....................         else if (fstate == 3) {                //Información recibida corresponde a la segunda opcion de la orden 
00C8:  GOTO   176
00C9:  MOVF   2B,W
00CA:  SUBLW  03
00CB:  BTFSS  03.2
00CC:  GOTO   176
....................             numero2 = incoming;                //Se guarda dato 
00CD:  MOVF   3E,W
00CE:  MOVWF  2E
....................             interpreta(); 
....................         } 
....................     } 
.................... } 
....................  
....................  
....................  
*
0176:  BCF    0C.3
0177:  BCF    0A.3
0178:  BCF    0A.4
0179:  GOTO   023
.................... void main() 
.................... { 
*
018E:  CLRF   04
018F:  BCF    03.7
0190:  MOVLW  1F
0191:  ANDWF  03,F
0192:  MOVLW  71
0193:  BSF    03.5
0194:  MOVWF  0F
0195:  MOVF   0F,W
0196:  BCF    03.5
0197:  BSF    28.3
0198:  MOVF   28,W
0199:  BSF    03.5
019A:  MOVWF  07
019B:  BCF    03.5
019C:  BSF    28.4
019D:  MOVF   28,W
019E:  BSF    03.5
019F:  MOVWF  07
01A0:  MOVLW  1F
01A1:  MOVWF  13
01A2:  MOVLW  36
01A3:  BCF    03.5
01A4:  MOVWF  14
01A5:  MOVLW  F9
01A6:  MOVWF  32
01A7:  MOVLW  7F
01A8:  MOVWF  31
01A9:  MOVLW  D7
01AA:  MOVWF  34
01AB:  MOVLW  E7
01AC:  MOVWF  33
01AD:  MOVLW  A2
01AE:  MOVWF  36
01AF:  MOVLW  0D
01B0:  MOVWF  35
01B1:  BSF    03.5
01B2:  BSF    03.6
01B3:  MOVF   09,W
01B4:  ANDLW  C0
01B5:  MOVWF  09
01B6:  BCF    03.6
01B7:  BCF    1F.4
01B8:  BCF    1F.5
01B9:  MOVLW  00
01BA:  BSF    03.6
01BB:  MOVWF  08
01BC:  BCF    03.5
01BD:  CLRF   07
01BE:  CLRF   08
01BF:  CLRF   09
....................     set_tris_A(0x00); 
*
01C5:  MOVLW  00
01C6:  BSF    03.5
01C7:  MOVWF  05
....................     set_tris_B(0x00); 
01C8:  MOVWF  06
....................     bit_set(TRISC,0);    //RC0 entrada 
01C9:  BSF    07.0
....................     bit_set(TRISC,1);    //RC1 entrada 
01CA:  BSF    07.1
....................     bit_clear(TRISC,2);    //RC2 salida 
01CB:  BCF    07.2
....................     bit_set(TRISC,5);    //RC5 entrada 
01CC:  BSF    07.5
....................  
....................     bit_clear(PORTC,2);    //RC2=0 
01CD:  BCF    03.5
01CE:  BCF    07.2
....................  
....................     estado = 0x00;                //Representa el estado del master 
01CF:  CLRF   29
....................     estadoAnterior = 0x01;        //Definido con un valor diferente a estado solo a fines de que pase por el primer bucle de desenergizado 
01D0:  MOVLW  01
01D1:  MOVWF  2A
....................      
....................     stepIndex = 0; 
01D2:  CLRF   37
....................  
....................     setup_adc_ports(NO_ANALOGS|VSS_VDD);     
01D3:  BSF    03.5
01D4:  BSF    03.6
01D5:  MOVF   09,W
01D6:  ANDLW  C0
01D7:  MOVWF  09
01D8:  BCF    03.6
01D9:  BCF    1F.4
01DA:  BCF    1F.5
01DB:  MOVLW  00
01DC:  BSF    03.6
01DD:  MOVWF  08
....................     setup_adc(ADC_CLOCK_DIV_2); 
01DE:  BCF    03.5
01DF:  BCF    03.6
01E0:  BCF    1F.6
01E1:  BCF    1F.7
01E2:  BSF    03.5
01E3:  BCF    1F.7
01E4:  BCF    03.5
01E5:  BSF    1F.0
....................     setup_timer_0(RTCC_INTERNAL|RTCC_DIV_1); 
01E6:  BSF    03.5
01E7:  MOVF   01,W
01E8:  ANDLW  C7
01E9:  IORLW  08
01EA:  MOVWF  01
....................     setup_timer_1(T1_INTERNAL|T1_DIV_BY_1); 
01EB:  MOVLW  05
01EC:  BCF    03.5
01ED:  MOVWF  10
....................     setup_timer_2(T2_DISABLED,0,1); 
01EE:  MOVLW  00
01EF:  MOVWF  78
01F0:  MOVWF  12
01F1:  MOVLW  00
01F2:  BSF    03.5
01F3:  MOVWF  12
....................     setup_comparator(NC_NC_NC_NC);// This device COMP currently not supported by the PICWizard 
01F4:  BCF    03.5
01F5:  BSF    03.6
01F6:  CLRF   07
01F7:  CLRF   08
01F8:  CLRF   09
....................     enable_interrupts(INT_TIMER1); 
01F9:  BSF    03.5
01FA:  BCF    03.6
01FB:  BSF    0C.0
....................     enable_interrupts(INT_SSP); 
01FC:  BSF    0C.3
....................     enable_interrupts(GLOBAL); 
01FD:  MOVLW  C0
01FE:  BCF    03.5
01FF:  IORWF  0B,F
.................... //Setup_Oscillator parameter not selected from Intr Oscillator Config tab 
.................... 	setup_oscillator( OSC_8MHZ );  
0200:  MOVLW  71
0201:  BSF    03.5
0202:  MOVWF  0F
0203:  MOVF   0F,W
....................  
....................     if(input(PIN_C5)==1){ 
0204:  BCF    03.5
0205:  BSF    28.5
0206:  MOVF   28,W
0207:  BSF    03.5
0208:  MOVWF  07
0209:  BCF    03.5
020A:  BTFSS  07.5
020B:  GOTO   211
....................         SSPADD = 0x10; 
020C:  MOVLW  10
020D:  BSF    03.5
020E:  MOVWF  13
....................     } 
....................     else if(input(PIN_C5)==0){ 
020F:  GOTO   21B
0210:  BCF    03.5
0211:  BSF    28.5
0212:  MOVF   28,W
0213:  BSF    03.5
0214:  MOVWF  07
0215:  BCF    03.5
0216:  BTFSC  07.5
0217:  GOTO   21C
....................         SSPADD = 0x20; 
0218:  MOVLW  20
0219:  BSF    03.5
021A:  MOVWF  13
021B:  BCF    03.5
....................     }         
....................      
....................     for (;;) 
....................     { 
....................         switch(estado) 
....................         { 
021C:  MOVF   29,W
021D:  BTFSC  03.2
021E:  GOTO   238
021F:  XORLW  01
0220:  BTFSC  03.2
0221:  GOTO   24B
0222:  XORLW  0A
0223:  BTFSC  03.2
0224:  GOTO   259
0225:  XORLW  02
0226:  BTFSC  03.2
0227:  GOTO   295
0228:  XORLW  06
0229:  BTFSC  03.2
022A:  GOTO   2AE
022B:  XORLW  0A
022C:  BTFSC  03.2
022D:  GOTO   2CF
022E:  XORLW  10
022F:  BTFSC  03.2
0230:  GOTO   2CF
0231:  XORLW  18
0232:  BTFSC  03.2
0233:  GOTO   2DE
0234:  XORLW  20
0235:  BTFSC  03.2
0236:  GOTO   303
0237:  GOTO   32E
....................             case 0x00:              //Desenergizar motor 
....................                 if(estadoAnterior & 0x01)    //antes estaba energizado 
0238:  BTFSS  2A.0
0239:  GOTO   242
....................                 { 
....................                     //Actualiza variables de estado 
....................                     estadoAnterior = 0x00; 
023A:  CLRF   2A
....................                     output_A(estado); 
023B:  MOVF   29,W
023C:  MOVWF  05
....................                     //Actualiza variables de control del motor 
....................                     disable_interrupts(INT_TIMER1); 
023D:  BSF    03.5
023E:  BCF    0C.0
....................                     output_B(0x00); 
023F:  CLRF   06
0240:  BCF    03.5
0241:  CLRF   06
....................                 } 
....................                 output_high(PIN_A0); 
0242:  BSF    05.0
.................... 				delay_ms(60); 
0243:  MOVLW  3C
0244:  MOVWF  3D
0245:  CALL   17A
.................... 				output_low(PIN_A0); 
0246:  BCF    05.0
.................... 				delay_ms(60); 
0247:  MOVLW  3C
0248:  MOVWF  3D
0249:  CALL   17A
....................                 break; 
024A:  GOTO   32E
....................             case 0x01:              //Energizar motor 
....................                 //Actualiza variables de estado 
....................                 output_A(estado); 
024B:  MOVF   29,W
024C:  MOVWF  05
....................                 //Actualiza variables de control del motor 
....................                 disable_interrupts(INT_TIMER1); 
024D:  BSF    03.5
024E:  BCF    0C.0
....................                 output_B(STEP[stepIndex]); 
024F:  BCF    03.5
0250:  MOVF   37,W
0251:  CALL   03A
0252:  MOVWF  3D
0253:  BSF    03.5
0254:  CLRF   06
0255:  BCF    03.5
0256:  MOVF   3D,W
0257:  MOVWF  06
....................                 break; 
0258:  GOTO   32E
....................             case 0x0B:              //Hacer homing 
....................                 output_A(estado); 
0259:  MOVF   29,W
025A:  MOVWF  05
....................                 output_high(PIN_C2);                                //informo que estoy ocupado 
025B:  BCF    28.2
025C:  MOVF   28,W
025D:  BSF    03.5
025E:  MOVWF  07
025F:  BCF    03.5
0260:  BSF    07.2
....................                 //BUSCANDO FIN DE CARRERA 
....................                 timerCarga = homingVel; 
0261:  MOVF   34,W
0262:  MOVWF  30
0263:  MOVF   33,W
0264:  MOVWF  2F
....................                 set_timer1(timerCarga);                    //Seteo la interrupcion del timer en una velocidad moderada 
0265:  MOVF   30,W
0266:  MOVWF  0F
0267:  MOVF   2F,W
0268:  MOVWF  0E
....................                 posicionObjetivo = 10; 
0269:  CLRF   3B
026A:  MOVLW  0A
026B:  MOVWF  3A
....................                 enable_interrupts(INT_TIMER1);            //habilito la interrupcion del timer 
026C:  BSF    03.5
026D:  BSF    0C.0
....................                 while(input(PIN_C0) == 0)                //mientras no reciba una señal del fin de carrera para homing 
....................                 {                         
026E:  BCF    03.5
026F:  BSF    28.0
0270:  MOVF   28,W
0271:  BSF    03.5
0272:  MOVWF  07
0273:  BCF    03.5
0274:  BTFSC  07.0
0275:  GOTO   27A
....................                     posicionActual = 100;                //actualizo la posicion actual siempre superior a la posicion objetivo para que en la interrupcion se retroceda 
0276:  CLRF   39
0277:  MOVLW  64
0278:  MOVWF  38
....................                 } 
0279:  GOTO   26F
....................                 //SEPARANDOSE DEL FIN DE CARRERA 
....................                 timerCarga = finHomingVel;                    //seteo la interrupcion del timer en una velocidad lenta 
027A:  MOVF   36,W
027B:  MOVWF  30
027C:  MOVF   35,W
027D:  MOVWF  2F
....................                 posicionObjetivo = 100; 
027E:  CLRF   3B
027F:  MOVLW  64
0280:  MOVWF  3A
....................                 while(input(PIN_C0) == 1)                        //mientras el fin de carrera hace contacto 
....................                 { 
0281:  BSF    28.0
0282:  MOVF   28,W
0283:  BSF    03.5
0284:  MOVWF  07
0285:  BCF    03.5
0286:  BTFSS  07.0
0287:  GOTO   28C
....................                     posicionActual = 10;                    //actualiza la posicion actual a un valor inferior a la posición objetivo para que avance lentamente 
0288:  CLRF   39
0289:  MOVLW  0A
028A:  MOVWF  38
....................                 } 
028B:  GOTO   281
....................                 //FIN DEL HOMING 
....................                 posicionActual = 0;                        //defino el origen 
028C:  CLRF   39
028D:  CLRF   38
....................                 posicionObjetivo = 0;                    //no tengo un objetivo nuevo 
028E:  CLRF   3B
028F:  CLRF   3A
....................                 estadoAnterior = 0x0B; 
0290:  MOVLW  0B
0291:  MOVWF  2A
....................                 estado = 0x05;                            //paso a estado de reposo, ya referenciado 
0292:  MOVLW  05
0293:  MOVWF  29
....................                 break; 
0294:  GOTO   32E
....................             case 0x09:              //avanzando ciego para permitir al otro robot hacer el homing 
....................                 //Actualiza variables de estado 
....................                 output_A(estado); 
0295:  MOVF   29,W
0296:  MOVWF  05
....................              
....................                 //Actualiza variables de control del motor 
....................                 //AVANZANDO 
....................                 timerCarga = homingVel; 
0297:  MOVF   34,W
0298:  MOVWF  30
0299:  MOVF   33,W
029A:  MOVWF  2F
....................                 set_timer1(timerCarga);                    //Seteo la interrupcion del timer en una velocidad moderada 
029B:  MOVF   30,W
029C:  MOVWF  0F
029D:  MOVF   2F,W
029E:  MOVWF  0E
....................                 posicionObjetivo = 100; 
029F:  CLRF   3B
02A0:  MOVLW  64
02A1:  MOVWF  3A
....................                 enable_interrupts(INT_TIMER1);            //habilito la interrupcion del timer 
02A2:  BSF    03.5
02A3:  BSF    0C.0
....................                  
....................                 //Loop para desplazarce hasta que el master indique detenerse (orden 'X') 
....................                 while(estado == 0x09){                    //mientras no reciba una mensaje del master de cambiar de estado, dejar de avanzar 
02A4:  BCF    03.5
02A5:  MOVF   29,W
02A6:  SUBLW  09
02A7:  BTFSS  03.2
02A8:  GOTO   2AD
....................                     posicionActual = 10;                //actualizo la posicion actual siempre superior a la posicion objetivo para que en la interrupcion avance 
02A9:  CLRF   39
02AA:  MOVLW  0A
02AB:  MOVWF  38
....................                 } 
02AC:  GOTO   2A5
....................                 break; 
02AD:  GOTO   32E
....................             case 0x0F:              //avanza para permitir al otro motor hacer homing, sin perder la referencia 
....................                 //Actualiza variables de estado 
....................                 output_A(estado); 
02AE:  MOVF   29,W
02AF:  MOVWF  05
....................  
....................                 //Actualiza variables de control del motor 
....................                 //AVANZANDO 
....................                 timerCarga = homingVel; 
02B0:  MOVF   34,W
02B1:  MOVWF  30
02B2:  MOVF   33,W
02B3:  MOVWF  2F
....................                 set_timer1(timerCarga);                    //Seteo la interrupcion del timer en una velocidad moderada 
02B4:  MOVF   30,W
02B5:  MOVWF  0F
02B6:  MOVF   2F,W
02B7:  MOVWF  0E
....................                 posicionObjetivo = posicionActual + 50;    //pongo un objetivo 'adelante' de la posicion actual 
02B8:  MOVLW  32
02B9:  ADDWF  38,W
02BA:  MOVWF  3A
02BB:  MOVF   39,W
02BC:  MOVWF  3B
02BD:  BTFSC  03.0
02BE:  INCF   3B,F
....................                 enable_interrupts(INT_TIMER1);            //habilito la interrupcion del timer 
02BF:  BSF    03.5
02C0:  BSF    0C.0
....................  
....................                 //Loop para desplazarce hasta que el master indique detenerse (orden 'X') 
....................                 while(estado == 0x0F){                    //mientras no reciba una mensaje del master de cambiar de estado, dejar de avanzar 
02C1:  BCF    03.5
02C2:  MOVF   29,W
02C3:  SUBLW  0F
02C4:  BTFSS  03.2
02C5:  GOTO   2CE
....................                     posicionObjetivo = posicionActual + 50;                //actualizo la posicion actual siempre superior a la posicion objetivo para que en la interrupcion avance 
02C6:  MOVLW  32
02C7:  ADDWF  38,W
02C8:  MOVWF  3A
02C9:  MOVF   39,W
02CA:  MOVWF  3B
02CB:  BTFSC  03.0
02CC:  INCF   3B,F
....................                 } 
02CD:  GOTO   2C2
....................                 break; 
02CE:  GOTO   32E
....................             case 0x05: 
....................             case 0x15:                                //Estado de reposo, energizado y referenciado 
....................                 if (estadoAnterior & 0x08)    //anteriormente se estaba moviendo 
02CF:  BTFSS  2A.3
02D0:  GOTO   2DD
....................                 { 
....................                     //Actualiza variables de estado 
....................                     estadoAnterior = estadoAnterior & 0xEF;	//pongo a 0 el bit que indica movimiento 
02D1:  BCF    2A.4
....................                     output_low(PIN_C2);                                //informo que estoy desocupado 
02D2:  BCF    28.2
02D3:  MOVF   28,W
02D4:  BSF    03.5
02D5:  MOVWF  07
02D6:  BCF    03.5
02D7:  BCF    07.2
....................                     output_A(estado); 
02D8:  MOVF   29,W
02D9:  MOVWF  05
....................  
....................                     //Actualiza variables de control del motor 
....................                     disable_interrupts(INT_TIMER1); 
02DA:  BSF    03.5
02DB:  BCF    0C.0
02DC:  BCF    03.5
....................                 } 
....................                 break; 
02DD:  GOTO   32E
....................             case 0x0D: 
....................                 //Actualiza variables de estado 
....................                 output_A(estado); 
02DE:  MOVF   29,W
02DF:  MOVWF  05
....................                 output_high(PIN_C2);                                //informo que estoy ocupado 
02E0:  BCF    28.2
02E1:  MOVF   28,W
02E2:  BSF    03.5
02E3:  MOVWF  07
02E4:  BCF    03.5
02E5:  BSF    07.2
....................  
....................                 //Actualiza variables de control del motor 
....................                 timerCarga = pasoRapido; 
02E6:  MOVF   32,W
02E7:  MOVWF  30
02E8:  MOVF   31,W
02E9:  MOVWF  2F
....................                 set_timer1(timerCarga); 
02EA:  MOVF   30,W
02EB:  MOVWF  0F
02EC:  MOVF   2F,W
02ED:  MOVWF  0E
....................                 enable_interrupts(INT_TIMER1); 
02EE:  BSF    03.5
02EF:  BSF    0C.0
....................                  
....................                 //Loop hasta llegar a la posición objetivo 
....................                 while(estado == 0x0D)    //el bucle no es while(posicionActual!=posicionObjetivo) para permitir cortar el avance con la orden 'X' 
....................                 { 
02F0:  BCF    03.5
02F1:  MOVF   29,W
02F2:  SUBLW  0D
02F3:  BTFSS  03.2
02F4:  GOTO   2FE
.................... 	                if (posicionActual == posicionObjetivo) 
02F5:  MOVF   3A,W
02F6:  SUBWF  38,W
02F7:  BTFSS  03.2
02F8:  GOTO   2FD
02F9:  MOVF   3B,W
02FA:  SUBWF  39,W
02FB:  BTFSC  03.2
....................                         break; 
02FC:  GOTO   2FE
....................                 } 
02FD:  GOTO   2F1
....................                 estadoAnterior = 0x0D; 
02FE:  MOVLW  0D
02FF:  MOVWF  2A
....................                 estado = 0x05; 
0300:  MOVLW  05
0301:  MOVWF  29
....................                 break; 
0302:  GOTO   32E
....................             case 0x2D: 
....................                 //Actualiza variables de estado 
....................                 output_A(estado); 
0303:  MOVF   29,W
0304:  MOVWF  05
....................  
....................                 while(input(PIN_C1) == 0){	//Espera a que el dispositivo de escritura sea accionado 
0305:  BSF    28.1
0306:  MOVF   28,W
0307:  BSF    03.5
0308:  MOVWF  07
0309:  BCF    03.5
030A:  BTFSS  07.1
....................                 } 
030B:  GOTO   305
....................  
....................                 //Actualiza variables de control del motor 
....................                 enable_interrupts(INT_TIMER1); 
030C:  BSF    03.5
030D:  BSF    0C.0
....................  
....................                 output_high(PIN_C2);                                //informo que estoy ocupado 
030E:  BCF    03.5
030F:  BCF    28.2
0310:  MOVF   28,W
0311:  BSF    03.5
0312:  MOVWF  07
0313:  BCF    03.5
0314:  BSF    07.2
....................                  
....................                 //Loop hasta llegar a la posición objetivo 
....................                 while((estado == 0x2D) && (input(PIN_C1)==1))    //el bucle no es while(posicionActual!=posicionObjetivo) para permitir cortar el avance con la orden 'X'                { 
....................                 { 
0315:  MOVF   29,W
0316:  SUBLW  2D
0317:  BTFSS  03.2
0318:  GOTO   329
0319:  BSF    28.1
031A:  MOVF   28,W
031B:  BSF    03.5
031C:  MOVWF  07
031D:  BCF    03.5
031E:  BTFSS  07.1
031F:  GOTO   329
.................... 	                if (posicionActual == posicionObjetivo) 
0320:  MOVF   3A,W
0321:  SUBWF  38,W
0322:  BTFSS  03.2
0323:  GOTO   328
0324:  MOVF   3B,W
0325:  SUBWF  39,W
0326:  BTFSC  03.2
....................                         break; 
0327:  GOTO   329
....................                 } 
0328:  GOTO   315
....................                 estadoAnterior = 0x2D; 
0329:  MOVLW  2D
032A:  MOVWF  2A
....................                 estado = 0x05; 
032B:  MOVLW  05
032C:  MOVWF  29
....................                 break; 
032D:  GOTO   32E
....................         } 
....................     } 
032E:  GOTO   21C
.................... } 
032F:  SLEEP

Configuration Fuses:
   Word  1: 2CF5   INTRC NOWDT NOPUT MCLR NOPROTECT NOCPD NOBROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   NOWRT BORV40
